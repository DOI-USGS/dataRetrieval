[{"path":"/articles/Contributing.html","id":"package-development","dir":"Articles","previous_headings":"","what":"Package development","title":"How to Contribute","text":"article walk adding function package. use git-branching workflow, full git tutorial. also complete guide R package development (comprehensive guide R Packages), instead meant checklist general steps. Several references included bottom information R-package development git workflows.","code":""},{"path":"/articles/Contributing.html","id":"initial-setup","dir":"Articles","previous_headings":"","what":"Initial Setup","title":"How to Contribute","text":"section describe steps necessary get started. steps need done .","code":""},{"path":"/articles/Contributing.html","id":"required-installations","dir":"Articles","previous_headings":"Initial Setup","what":"Required installations","title":"How to Contribute","text":"several programs needed work can begin. admin access computer, can install , otherwise create ticket group following requests. links provided assume Windows computer. Adjustments might needed Mac Linux OS: R RStudio Rtools - needed Windows users. Git MikTex - optional Windows users use LaTeX. installed, following R packages needed R-package development work:","code":"install.packages(c(\"devtools\", \"rmarkdown\"))"},{"path":"/articles/Contributing.html","id":"github-versus-gitlab","dir":"Articles","previous_headings":"","what":"GitHub versus GitLab","title":"How to Contribute","text":"dataRetrieval publicly available package. public urged report issues ask questions GitHub page: GitHub Issues public welcome fork GitHub repository can submit pull requests. Since dataRetrieval used many people, proposed changes thoroughly reviewed considered. dataRetrieval development done USGS employees done code.usgs.gov/water/dataRetrieval. USGS GitLab system. Throughout document, referred code.usgs.gov GitLab. updates bug fixes tested GitLab, pushed GitHub repository.","code":""},{"path":"/articles/Contributing.html","id":"code-usgs-gov-gitlab-setup","dir":"Articles","previous_headings":"GitHub versus GitLab","what":"code.usgs.gov (GitLab) setup","title":"How to Contribute","text":"USGS DOI employees can use code.usgs.gov dataRetrieval development. section shows steps setup development work code.usgs.gov system. code.usgs.gov USGS enterprise GitLab home. people either refer either code.usgs.gov simply “GitLab”. instructions generally refer code.usgs.gov GitLab unless ’s specific USGS version GitLab (example, log ). questions use code.usgs.gov, general advice GitLab often suffice (Googling answers great first step!) first step collaborating via code.usgs.gov log . USGS/DOI employees, means using:","code":""},{"path":"/articles/Contributing.html","id":"personal-access-token","dir":"Articles","previous_headings":"GitHub versus GitLab > code.usgs.gov (GitLab) setup","what":"Personal Access Token","title":"How to Contribute","text":"step needs done per computer setup. ’ve done can skip step. ’ll need set Personal Access Token. Go https://code.usgs.gov/-/profile/personal_access_tokens create new token selecting api scope:  clicking green “Create personal access token”, see screen like : Save token safe place (KeyPass instance) don’t need constantly regenerate tokens. need token authenticating git pull (steps….).","code":""},{"path":"/articles/Contributing.html","id":"local-project-setup","dir":"Articles","previous_headings":"","what":"Local project setup","title":"How to Contribute","text":"easiest way set work package create new Project within RStudio. steps needed get files GitLab (USGS/DOI employees) GitHub (external collaborators) computer. Create new project -> Version Control -> Git  Navigate landing page repository find Repository URL. code.usgs.gov, use “Clone” button copy HTTPS URL:  GitHub, use “Code” button copy SSH url:  Paste HTTPS git address Repository URL:  Logging may need log (’ve logged , log prompt can skip step). code.usgs.gov, use full email user name, personal access token password. AD password!  attempt use HTTPS even prompted password, receive failed authentication error message, probably one point past provided incorrect username/password Windows (MacOS) chose store password built-credential manager. Windows, called Credential Manager. Mac, called Keychain. Clear credential try . GitHub, see Adding New SSH Key.","code":""},{"path":[]},{"path":"/articles/Contributing.html","id":"initial-installation","dir":"Articles","previous_headings":"Setup Local Build","what":"Initial Installation","title":"How to Contribute","text":"Click “Install Restart” Build tab upper right RStudio window. packages package depends installed computer, get warning. Install packages manually try “Install Restart” . successful, see something like:  common problem stage might packages listed either Depends Imports DESCRIPTION file. see message like :  Read package missing computer install, can use remotes package:","code":"remotes::install_deps()"},{"path":"/articles/Contributing.html","id":"set-up-roxygen-options","dir":"Articles","previous_headings":"Setup Local Build","what":"Set up roxygen options","title":"How to Contribute","text":"Turn option use Roxygen build help pages. Click button “Build” tab, choose “Configure Build Tools”.  Click radio button “Generate documentation Roxygen”. click Configure button check options:  LaTeX software installed (Windows MikTex instance), want include ---manual check options.  Click “OK” exit configuration options. now set start working package!","code":""},{"path":"/articles/Contributing.html","id":"r-package-development","dir":"Articles","previous_headings":"","what":"R-package development","title":"How to Contribute","text":"’re now setup start contributing R-package! next section walk adding new function package.","code":""},{"path":"/articles/Contributing.html","id":"project-management","dir":"Articles","previous_headings":"R-package development","what":"Project management","title":"How to Contribute","text":"Planned dataRetrieval work done GitLab. Public inquiries, bug reports, enhancement requests done GitHub. environments similar features. distinct set work tasks described single issue. issues enough detail describe required work example test task complete. Discussions issues can include screenshots, formatted code snippets, general markdown formatting options. task assigned developer. Appropriate labels assigned task. Issue templates provided. Developers encouraged use git commands reference issues. developers authority merge updates main branch dataRetrieval. merge/pull request must reviewed authorized approver. Approvers must check updates functional efficient. Since dataRetrieval CRAN, examples tests hit web services flagged run CRAN. Approvers try consider unique use-cases may addressed original Issue. Additional topics approvers checking increased test coverage, minimizing new package dependencies, consistent coding style, consistent user experience. Ideally authorized approvers get another approver check merge requests, required.","code":""},{"path":"/articles/Contributing.html","id":"set-up-a-new-git-branch","dir":"Articles","previous_headings":"R-package development","what":"Set up a new git branch","title":"How to Contribute","text":"starting anything new, try always remember pull changes happened repo. “Git” tab, click arrow triggers “git pull”:  Create new branch. let work idea without risking adding -development work “main” branch repository. good rule--thumb, consider creating new branch “Issue”.","code":""},{"path":"/articles/Contributing.html","id":"building-a-new-function","dir":"Articles","previous_headings":"R-package development","what":"Building a new function","title":"How to Contribute","text":"details new function, great! steps get fully incorporated package others can use . See R Packages complete details. Follow style guidelines agreed upon package development team. example new function follows package guidelines. Save R file “R” folder package.","code":"#' My fancy new function #'  #' This is my fancy new function. It's really great. #'  #' @param excited_flag logical. This sets our output #' to excited or not #' @export #' @examples  #' my_fancy_function(excited_flag = TRUE) #' my_fancy_function(excited_flag = FALSE) my_fancy_function <- function(excited_flag){      if(!is.logical(excited_flag)){     stop(\"Input is not a length one logical vector\")   }      if(excited_flag){     say <- \"HI!\"   } else {     say <- \"hi\"   }   return(say) }"},{"path":"/articles/Contributing.html","id":"local-package-check","dir":"Articles","previous_headings":"R-package development","what":"Local Package Check","title":"How to Contribute","text":"Check package make sure function works properly, doesn’t add new Errors, Warnings, Notes.  Note sometimes can take long time. package checked automatically code.usgs.gov CI pipeline, still good idea run check locally especially setting new function initially.","code":""},{"path":"/articles/Contributing.html","id":"creating-tests","dir":"Articles","previous_headings":"R-package development","what":"Creating tests","title":"How to Contribute","text":"’s also important create tests check functions exactly expect . Use testthat package create tests. Navigate tests/testthat folder create new tests new function. much possible, tests check every part function. “Build” tab, “”, test full package","code":"context(\"Test my fancy function\") test_that(\"My fancy function\", {    excited <- my_fancy_function(excited_flag = TRUE)   not_excited <- my_fancy_function(excited_flag = FALSE)      expect_type(excited, type = \"character\")   expect_equal(excited, \"HI!\")   expect_equal(not_excited, \"hi\")   expect_error(my_fancy_function(excited_flag = \"what?\")) })"},{"path":"/articles/Contributing.html","id":"adding-the-function-to-vignettes-readme-report-template-","dir":"Articles","previous_headings":"R-package development","what":"Adding the function to vignettes, README, report template.","title":"How to Contribute","text":"function advertised general workflow, consider adding README. first place users read come code repository. function added section vignette, entirely new vignette written. packages, report template “inst/templates” folder. Consider function make sense generalized report.","code":""},{"path":"/articles/Contributing.html","id":"push-up-to-code-repository","dir":"Articles","previous_headings":"R-package development","what":"Push up to code repository","title":"How to Contribute","text":"can done stages. ’ve done everything correctly, ready commit least R script, generated Rd documentation file, testthat changes, updates NAMESPACE. Git tab, click arrow “Pull”. haven’t made changes branch yet, get message “Already date”. Git tab, click radio buttons next files either adding modifying. include R script function, test file(s), Rd documentation, updated NAMESPACE. also include changes README, vignettes, inst/template/report.Rmd, etc. click “Commit” button:  Write message help remember commit . Glance “Diffs” shown . everything looks good, click “Commit”.  Click arrow “Push” changes feature branch GitLab (code.usgs.gov).","code":""},{"path":"/articles/Contributing.html","id":"gitlab-ci-pipeline","dir":"Articles","previous_headings":"R-package development","what":"Gitlab CI Pipeline","title":"How to Contribute","text":"repository file already set called .gitlab-ci.yml. file organizes automatic checks package via “pipeline”. Usually setup phase installs required package, check phase check package. like add separate testing test coverage checks. merge request merged, pipeline come back errors:  helps assure changes causing failures independent platform.","code":""},{"path":"/articles/Contributing.html","id":"merge-request","dir":"Articles","previous_headings":"R-package development","what":"Merge request","title":"How to Contribute","text":"far, pushed specific branch code.usgs.gov. ’s set go directly “main” branch. open repository, may see message like :  Click “Create merge request” initiate “merge request”.  Fill information included merge request. assign someone peer review code. great place review. good idea discuss collaborators want guidelines set decide responsibility perform merge (…click Merge button).","code":""},{"path":"/articles/Contributing.html","id":"merge-reports","dir":"Articles","previous_headings":"R-package development > Merge request","what":"Merge Reports","title":"How to Contribute","text":"things check pipeline finished. first main goal package passes checks. next thing check test coverage. write tests “testthat” folder, checking code ’s suppose . can also check well code covered tests. called “test coverage”. programs can analyze line code determine lines tested, lines . high percentage test coverage one metric good testing. However, also important write good meaningful tests. test function didn’t fail, still don’t know function produced meaningful output. test coverage good better coverage currently canonical “main” branch. following screenshot, test coverage “main” branch 92.11%. pull request set increase coverage 0.11% 92.22%. notice test coverage decreasing, want look test suite see can add tests make sure package working properly. screenshot also shows get full report tests package.  Another report GitLab can produced found “Changes” tab merge request. green red vertical lines file diffs. vertical lines indicate code covered test (green line), test (thicker red line).  can useful finding parts code covered tests. Pipeline passed code review satisfactory, clicking Merge button move changes “main” branch.","code":""},{"path":"/articles/Contributing.html","id":"clean-up-local-enviornment","dir":"Articles","previous_headings":"","what":"Clean up local enviornment","title":"How to Contribute","text":"Congratulations, contributed package! next steps always done merge request completed don’t continue work specific feature branch.","code":""},{"path":"/articles/Contributing.html","id":"switch-back-to-main-branch","dir":"Articles","previous_headings":"Clean up local enviornment","what":"Switch back to “main” branch","title":"How to Contribute","text":"upper right corner Git window RStudio, can click dropdown get back “main” branch.","code":""},{"path":"/articles/Contributing.html","id":"delete-local-feature-branch","dir":"Articles","previous_headings":"Clean up local enviornment","what":"Delete local feature branch","title":"How to Contribute","text":"way code.usgs.gov set , branch automatically deleted code.usgs.gov. still want delete feature branch locally. Go Terminal lower left corner RStudio, type git branch -d my_fancy_function (whatever named branch).","code":""},{"path":"/articles/Contributing.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"How to Contribute","text":"R Packages Happy Git testthat R markdown USGS Software Policy","code":""},{"path":"/articles/Contributing.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"How to Contribute","text":"software preliminary provisional subject revision. provided meet need timely best science. software received final approval U.S. Geological Survey (USGS). warranty, expressed implied, made USGS U.S. Government functionality software related material shall fact release constitute warranty. software provided condition neither USGS U.S. Government shall held liable damages resulting authorized unauthorized use software. use trade, firm, product names descriptive purposes imply endorsement U.S. Government.","code":""},{"path":"/articles/dataRetrieval.html","id":"usgs-web-retrievals","dir":"Articles","previous_headings":"","what":"USGS Web Retrievals","title":"Introduction to the dataRetrieval package","text":"section, examples National Water Information System (NWIS) retrievals show get raw data R. data includes site information, measured parameter information, historical daily values, unit values (include real-time data can also include sensor data stored regular time intervals), water quality data, groundwater level data, peak flow data, rating curve data, surface-water measurement data, water use data, statistics data. section Embedded Metadata shows instructions getting metadata attached returned data frame. USGS organizes hydrologic data standard structure. Streamgages located throughout United States, streamgage unique ID (referred document throughout dataRetrieval package siteNumber). Often (always), ID’s 8 digits surface-water sites 15 digits groundwater sites. first step finding data discovering siteNumber. many ways , one National Water Information System: Mapper. siteNumber known, next required input USGS data retrievals “parameter code”. 5-digit code specifies measured parameter requested. example, parameter code 00631 represents “Nitrate plus nitrite, water, filtered, milligrams per liter nitrogen”, units “mg/l N”. every station measure parameters. short list commonly measured parameters shown Table 2. Table 2: Common USGS Parameter Codes Two output columns may obvious “srsname” “casrn”. Srsname stands “Substance Registry Services”. information srs name can found . Casrn stands “Chemical Abstracts Service (CAS) Registry Number”. information CAS can found . unit values data (sensor data measured regular time intervals 15 minutes hourly), knowing parameter code siteNumber enough make request data. variables measured continuous basis, USGS also stores historical data daily values. daily values statistical summaries continuous data, e.g. maximum, minimum, mean, median. different statistics specified 5-digit statistics code. common codes shown Table 3. Table 3: Commonly used USGS Stat Codes Examples using site numbers, parameter codes, statistic codes presented subsequent sections. occasions NWIS values reported numbers, instead might text describing certain event “Ice”. value converted number reported NA package (including remark code columns), unless user sets argument convertType FALSE. case, data returned data frame entirely character columns.","code":""},{"path":[]},{"path":"/articles/dataRetrieval.html","id":"readnwissite","dir":"Articles","previous_headings":"USGS Web Retrievals > Site Information","what":"readNWISsite","title":"Introduction to the dataRetrieval package","text":"Use readNWISsite function obtain information available particular USGS site (sites) full station name, drainage area, latitude, longitude. readNWISsite can also access information multiple sites vector input. Site information obtained : https://waterservices.usgs.gov/rest/Site-Test-Tool.html Information returned data can found comment function described Metadata section.","code":"siteNumbers <- c(\"01491000\", \"01645000\") siteINFO <- readNWISsite(siteNumbers) comment(siteINFO)"},{"path":"/articles/dataRetrieval.html","id":"whatnwisdata","dir":"Articles","previous_headings":"USGS Web Retrievals > Site Information","what":"whatNWISdata","title":"Introduction to the dataRetrieval package","text":"discover data available particular USGS site, including measured parameters, period record, number samples (count), use whatNWISdata function. possible limit retrieval information subset services. possible choices services : “dv” (daily values), “uv”, “iv” (unit values), “qw” (water-quality), “sv” (sites visits), “pk” (peak measurements), “gw” (groundwater levels), “ad” (sites included USGS Annual Water Data Reports External Link), “aw” (sites monitored USGS Active Groundwater Level Network External Link), “id” (historical instantaneous values). following example, limit retrieved data daily data. default “service” , returns available data site. Likewise, arguments parameter code (parameterCd) statistic code (statCd) filter results. default return possible values (). returned count_nu “uv” data count days returned data, actual count returned values. Table 4: Reformatted version output whatNWISdata function Choptank River near Greensboro, MD, Seneca Creek Dawsonville, MD daily values service [columns deleted space considerations] See Creating Tables instructions converting R data frame table Microsoft® software Excel Word display data availability table similar Table 4. Excel, Microsoft, PowerPoint, Windows, Word registered trademarks Microsoft Corporation United States countries.","code":"# Continuing from the previous example: # This pulls out just the daily, mean data:  dailyDataAvailable <- whatNWISdata(   siteNumber = siteNumbers,   service = \"dv\",   statCd = \"00003\" )"},{"path":"/articles/dataRetrieval.html","id":"parameter-information","dir":"Articles","previous_headings":"USGS Web Retrievals","what":"Parameter Information","title":"Introduction to the dataRetrieval package","text":"obtain available information concerning measured parameter (multiple parameters), use readNWISpCode function:","code":"# Using defaults: parameterCd <- \"00618\" parameterINFO <- readNWISpCode(parameterCd)"},{"path":"/articles/dataRetrieval.html","id":"daily-data","dir":"Articles","previous_headings":"USGS Web Retrievals","what":"Daily Data","title":"Introduction to the dataRetrieval package","text":"obtain daily records USGS data, use readNWISdv function. arguments function siteNumbers, parameterCd, startDate, endDate, statCd (defaults “00003”). want use default values, need list function call. Daily data pulled https://waterservices.usgs.gov/rest/DV-Test-Tool.html. dates (start end) must format “YYYY-MM-DD” (note: user must include quotes). Setting start date “” (space) prompt program ask earliest date, setting end date “” (space) prompt latest available date. column “datetime” returned data frame automatically imported variable class “Date” R. requested parameter value remark code column. names columns depend requested parameter stat code combinations. USGS daily value qualification codes often “” (approved publication) “P” (provisional data subject revision). Another example request mean maximum daily temperature discharge early 2012: column names can shortened simplified using renameNWISColumns function. necessary, may streamline subsequent data analysis presentation. Site information, daily statistic information, measured parameter information attached data frame attributes. discussed metadata section. example plotting data:","code":"# Choptank River near Greensboro, MD: siteNumber <- \"01491000\" parameterCd <- \"00060\" # Discharge startDate <- \"2009-10-01\" endDate <- \"2012-09-30\"  discharge <- readNWISdv(siteNumber, parameterCd, startDate, endDate) siteNumber <- \"01491000\" parameterCd <- c(\"00010\", \"00060\") # Temperature and discharge statCd <- c(\"00001\", \"00003\") # Mean and maximum startDate <- \"2012-01-01\" endDate <- \"2012-05-01\"  temperatureAndFlow <- readNWISdv(siteNumber, parameterCd,   startDate, endDate,   statCd = statCd ) names(temperatureAndFlow) ## [1] \"agency_cd\"        \"site_no\"          \"Date\"             ## [4] \"X_00010_00001_cd\" \"X_00010_00001\"    \"X_00010_00003_cd\" ## [7] \"X_00010_00003\"    \"X_00060_00003_cd\" \"X_00060_00003\" temperatureAndFlow <- renameNWISColumns(temperatureAndFlow) names(temperatureAndFlow) ## [1] \"agency_cd\"    \"site_no\"      \"Date\"         ## [4] \"Wtemp_Max_cd\" \"Wtemp_Max\"    \"Wtemp_cd\"     ## [7] \"Wtemp\"        \"Flow_cd\"      \"Flow\" # Information about the data frame attributes: names(attributes(temperatureAndFlow)) ## [1] \"names\"         \"row.names\"     \"url\"           ## [4] \"siteInfo\"      \"variableInfo\"  \"disclaimer\"    ## [7] \"statisticInfo\" \"queryTime\"     \"class\" statInfo <- attr(temperatureAndFlow, \"statisticInfo\") variableInfo <- attr(temperatureAndFlow, \"variableInfo\") siteInfo <- attr(temperatureAndFlow, \"siteInfo\") variableInfo <- attr(temperatureAndFlow, \"variableInfo\") siteInfo <- attr(temperatureAndFlow, \"siteInfo\")  par(mar = c(5, 5, 5, 5)) # sets the size of the plot window  plot(temperatureAndFlow$Date, temperatureAndFlow$Wtemp_Max,   ylab = variableInfo$parameter_desc[1],   xlab = \"\" ) par(new = TRUE) plot(temperatureAndFlow$Date,   temperatureAndFlow$Flow,   col = \"red\", type = \"l\",   xaxt = \"n\", yaxt = \"n\",   xlab = \"\", ylab = \"\",   axes = FALSE ) axis(4, col = \"red\", col.axis = \"red\") mtext(variableInfo$parameter_desc[2], side = 4, line = 3, col = \"red\") title(paste(siteInfo$station_nm, \"2012\")) legend(\"topleft\", variableInfo$param_units,   col = c(\"black\", \"red\"), lty = c(NA, 1),   pch = c(1, NA) )"},{"path":"/articles/dataRetrieval.html","id":"unit-data","dir":"Articles","previous_headings":"USGS Web Retrievals","what":"Unit Data","title":"Introduction to the dataRetrieval package","text":"data collected regular time intervals (15-minute hourly) known “unit values”. Many delivered real time basis recent data (even less hour old many cases) available function readNWISuv. unit values available many years, available recent time period 120 days. example retrieval data. retrieval produces data frame contains 96 rows (one every 15 minute period day). include data collected startDate endDate (starting ending midnight locally-collected time). dateTime column converted UTC (Coordinated Universal Time), midnight EST 5 hours earlier dateTime column (previous day, 7pm). override UTC timezone, specify valid timezone tz argument. Default ““, keep dateTime column UTC. valid timezones : Data retrieved https://waterservices.usgs.gov/rest/IV-Test-Tool.html. occasions NWIS values reported numbers, instead common example “Ice”. value converted number reported NA package. Site information measured parameter information attached data frame attributes. discussed metadata section.","code":"parameterCd <- \"00060\" # Discharge startDate <- \"2012-05-12\" endDate <- \"2012-05-13\" dischargeUnit <- readNWISuv(siteNumber, parameterCd, startDate, endDate) dischargeUnit <- renameNWISColumns(dischargeUnit) America/New_York America/Chicago America/Denver America/Los_Angeles America/Anchorage America/Honolulu America/Jamaica America/Managua America/Phoenix America/Metlakatla"},{"path":"/articles/dataRetrieval.html","id":"groundwater-level-data","dir":"Articles","previous_headings":"USGS Web Retrievals","what":"Groundwater Level Data","title":"Introduction to the dataRetrieval package","text":"Groundwater level measurements can obtained readNWISgwl function. Information returned data can found comment function, attached attributes described metadata section.","code":"siteNumber <- \"434400121275801\" groundWater <- readNWISgwl(siteNumber)"},{"path":"/articles/dataRetrieval.html","id":"peak-flow-data","dir":"Articles","previous_headings":"USGS Web Retrievals","what":"Peak Flow Data","title":"Introduction to the dataRetrieval package","text":"Peak flow data instantaneous discharge stage data record maximum values variables flood event. include annual peak flood event can also include records peaks lower annual maximum. Peak discharge measurements can obtained readNWISpeak function. Information returned data can found comment function attached attributes described metadata section.","code":"siteNumber <- \"01594440\" peakData <- readNWISpeak(siteNumber)"},{"path":"/articles/dataRetrieval.html","id":"rating-curve-data","dir":"Articles","previous_headings":"USGS Web Retrievals","what":"Rating Curve Data","title":"Introduction to the dataRetrieval package","text":"Rating curves calibration curves used convert measurements stage discharge. changing hydrologic conditions rating curves change time. Information returned data can found comment function attached attributes described metadata section. Rating curves can obtained readNWISrating function.","code":"ratingData <- readNWISrating(siteNumber, \"base\") attr(ratingData, \"RATING\")"},{"path":"/articles/dataRetrieval.html","id":"surface-water-measurement-data","dir":"Articles","previous_headings":"USGS Web Retrievals","what":"Surface-Water Measurement Data","title":"Introduction to the dataRetrieval package","text":"data discrete measurements discharge made purpose developing revising rating curve. Information returned data can found comment function attached attributes described metadata section. Surface-water measurement data can obtained readNWISmeas function.","code":"surfaceData <- readNWISmeas(siteNumber)"},{"path":"/articles/dataRetrieval.html","id":"water-use-data","dir":"Articles","previous_headings":"USGS Web Retrievals","what":"Water Use Data","title":"Introduction to the dataRetrieval package","text":"Retrieves water use data USGS Water Use Data Nation. See https://waterdata.usgs.gov/nwis/wu information. available use categories supplied arguments retrieved.","code":"allegheny <- readNWISuse(   stateCd = \"Pennsylvania\",   countyCd = \"Allegheny\" )   national <- readNWISuse(   stateCd = NULL,   countyCd = NULL,   transform = TRUE )"},{"path":"/articles/dataRetrieval.html","id":"statistics-data","dir":"Articles","previous_headings":"USGS Web Retrievals","what":"Statistics Data","title":"Introduction to the dataRetrieval package","text":"Retrieves site statistics USGS Statistics Web Service beta.","code":"discharge_stats <- readNWISstat(   siteNumbers = c(\"02319394\"),   parameterCd = c(\"00060\"),   statReportType = \"annual\" )"},{"path":"/articles/dataRetrieval.html","id":"water-quality-portal-web-retrievals","dir":"Articles","previous_headings":"","what":"Water Quality Portal Web Retrievals","title":"Introduction to the dataRetrieval package","text":"Water quality data sets available Water Quality Data Portal. data sets can housed either STORET database (data EPA), NWIS database (data USGS), STEWARDS database (data USDA), additional databases slated included future. USGS uses parameter codes, “characteristic name” must supplied. readWQPqw function can take either USGS parameter code, general characteristic name parameterCd input argument. Water Quality Data Portal includes data discovery tools information characteristic names. following example retrieves specific conductance DNR site Wisconsin.","code":"specificCond <- readWQPqw(   \"WIDNR_WQX-10032762\",   \"Specific conductance\",   \"2011-05-01\", \"2011-09-30\" )"},{"path":"/articles/dataRetrieval.html","id":"generalized-retrievals","dir":"Articles","previous_headings":"","what":"Generalized Retrievals","title":"Introduction to the dataRetrieval package","text":"previous examples took specific input arguments: siteNumber, parameterCd (characteristic name), startDate, endDate, etc. However, Web services supply data can accept wide variety additional arguments.","code":""},{"path":[]},{"path":"/articles/dataRetrieval.html","id":"sites-whatnwissites","dir":"Articles","previous_headings":"Generalized Retrievals > NWIS","what":"Sites: whatNWISsites","title":"Introduction to the dataRetrieval package","text":"function whatNWISsites can used discover NWIS sites based query NWIS Site Service offers. done using ... argument, allows user use arbitrary input argument. can use service discover many options searching NWIS sites. example, may want search sites lat/lon bounding box, sites tidal streams, sites water quality samples, sites certain altitude, etc. results site query generate URL. example, tool provided search within specified bounding box, sites daily discharge (parameter code = 00060) temperature (parameter code = 00010). generated URL : https://waterservices.usgs.gov/nwis/site/?format=rdb&bBox=-83.0,36.5,-81.0,38.5&parameterCd=00010,00060&hasDataTypeCd=dv following dataRetrieval code can used get sites:","code":"sites <- whatNWISsites(   bBox = c(-83.0, 36.5, -81.0, 38.5),   parameterCd = c(\"00010\", \"00060\"),   hasDataTypeCd = \"dv\" )"},{"path":"/articles/dataRetrieval.html","id":"data-readnwisdata","dir":"Articles","previous_headings":"Generalized Retrievals > NWIS","what":"Data: readNWISdata","title":"Introduction to the dataRetrieval package","text":"NWIS data, function readNWISdata can used. argument listed R help file ... service (data requests). Table 5 describes services available. Table 5: NWIS general data calls ... argument allows user create queries based instructions found web links . links provide instructions create URL request data. Perhaps want sites Wisconsin, drainage area less 50 mi2, recent daily discharge data. request done follows:","code":"dischargeWI <- readNWISdata(   service = \"dv\",   stateCd = \"WI\",   parameterCd = \"00060\",   drainAreaMin = \"50\",   statCd = \"00003\" )  siteInfo <- attr(dischargeWI, \"siteInfo\")"},{"path":"/articles/dataRetrieval.html","id":"wqp","dir":"Articles","previous_headings":"Generalized Retrievals","what":"WQP","title":"Introduction to the dataRetrieval package","text":"Just NWIS, Water Quality Portal (WQP) offers variety ways search sites request data. possible Web service arguments WQP site searches found .","code":""},{"path":"/articles/dataRetrieval.html","id":"sites-whatwqpsites","dir":"Articles","previous_headings":"Generalized Retrievals > WQP","what":"Sites: whatWQPsites","title":"Introduction to the dataRetrieval package","text":"discover available sites WQP New Jersey measured Chloride, use function whatWQPsites.","code":"sitesNJ <- whatWQPsites(   statecode = \"US:34\",   characteristicName = \"Chloride\" )"},{"path":"/articles/dataRetrieval.html","id":"data-readwqpdata","dir":"Articles","previous_headings":"Generalized Retrievals > WQP","what":"Data: readWQPdata","title":"Introduction to the dataRetrieval package","text":"get data WQP using generalized Web service calls, use function readWQPdata. example, get pH data Wisconsin:","code":"dataPH <- readWQPdata(   statecode = \"US:55\",   characteristicName = \"pH\" )"},{"path":"/articles/dataRetrieval.html","id":"availability-whatwqpdata","dir":"Articles","previous_headings":"Generalized Retrievals > WQP","what":"Availability: whatWQPdata","title":"Introduction to the dataRetrieval package","text":"function whatWQPdata returns data frame information amount data collected site. example: returns data frame sites measured streams Dane County, WI. Also, table, measure activityCount (often site sampled), resultCount (many individual results available).","code":"type <- \"Stream\" sites <- whatWQPdata(countycode = \"US:55:025\", siteType = type)"},{"path":"/articles/dataRetrieval.html","id":"samples-whatwqpsamples","dir":"Articles","previous_headings":"Generalized Retrievals > WQP","what":"Samples: whatWQPsamples","title":"Introduction to the dataRetrieval package","text":"function whatWQPsamples returns information individual samples collected site. example: returns one row instance sample collect.","code":"site <- whatWQPsamples(siteid = \"USGS-01594440\")"},{"path":"/articles/dataRetrieval.html","id":"metrics-whatwqpmetrics","dir":"Articles","previous_headings":"Generalized Retrievals > WQP","what":"Metrics: whatWQPmetrics","title":"Introduction to the dataRetrieval package","text":"function whatWQPmetrics provides metric information. currently available STORET data:","code":"type <- \"Stream\" sites <- whatWQPmetrics(countycode = \"US:55:025\", siteType = type)"},{"path":"/articles/dataRetrieval.html","id":"embedded-metadata","dir":"Articles","previous_headings":"","what":"Embedded Metadata","title":"Introduction to the dataRetrieval package","text":"data frames returned Web services form associated metadata. information included attributes data frame. data frames url (returning character url used obtain data), siteInfo (returning data frame information sites), queryTime (returning POSIXct datetime) attributes. example, url query time used obtain data can found follows: Depending format data obtained (RDB, WaterML1, etc), additional information embedded data frame attributes. discover available attributes: data obtained readNWISuv, readNWISdv, readNWISgwl two attributes particularly useful: siteInfo variableInfo. Data obtained readNWISpeak, readNWISmeas, readNWISrating, comment attribute useful.","code":"attr(dischargeWI, \"url\")  attr(dischargeWI, \"queryTime\")  siteInfo <- attr(dischargeWI, \"siteInfo\") names(attributes(dischargeWI)) siteInfo <- attr(dischargeWI, \"siteInfo\")  variableInfo <- attr(dischargeWI, \"variableInfo\") comment(peakData)  # Which is equivalent to: attr(peakData, \"comment\")"},{"path":"/articles/dataRetrieval.html","id":"getting-started-in-r","dir":"Articles","previous_headings":"","what":"Getting Started in R","title":"Introduction to the dataRetrieval package","text":"section describes options downloading installing dataRetrieval package.","code":""},{"path":"/articles/dataRetrieval.html","id":"new-to-r","dir":"Articles","previous_headings":"Getting Started in R","what":"New to R?","title":"Introduction to the dataRetrieval package","text":"new R, need first install latest version R, can found [] (www.R-project.org). time, can get information function R typing question mark functions name. open file (RStudio, Help window) describes function, required arguments, provides working examples. open help file similar image . see raw code particular code, type name function, without parentheses. simple R help file Additionally, many R packages vignette files attached (paper). view vignette:","code":"?readNWISpCode vignette(topic = \"Introduction\", package = \"dataRetrieval\")"},{"path":"/articles/dataRetrieval.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Introduction to the dataRetrieval package","text":"information preliminary subject revision. provided meet need timely best science. information provided condition neither U.S. Geological Survey U.S. Government may held liable damages resulting authorized unauthorized use information.","code":""},{"path":"/articles/movingAverages.html","id":"get-data-using-dataretrieval","dir":"Articles","previous_headings":"","what":"Get data using dataRetrieval","title":"Calculating Moving Averages and Historical Flow Quantiles","text":"","code":"library(dataRetrieval)  # Retrieve daily Q siteNumber <- c(\"01538000\") parameterCd <- \"00060\" # Discharge dailyQ <- readNWISdv(siteNumber, parameterCd) dailyQ <- renameNWISColumns(dailyQ) stationInfo <- readNWISsite(siteNumber)"},{"path":"/articles/movingAverages.html","id":"calculate-moving-average","dir":"Articles","previous_headings":"","what":"Calculate moving average","title":"Calculating Moving Averages and Historical Flow Quantiles","text":"Next, calculate 30-day moving average flow data:","code":"library(dplyr) library(zoo)  # Check for missing days, if so, add NA rows: if (as.numeric(diff(range(dailyQ$Date))) != (nrow(dailyQ) + 1)) {   fullDates <- seq(     from = min(dailyQ$Date),     to = max(dailyQ$Date), by = \"1 day\"   )   fullDates <- data.frame(     Date = fullDates,     agency_cd = unique(dailyQ$agency_cd),     site_no = unique(dailyQ$site_no)   )   dailyQ <- fullDates %>%     left_join(dailyQ,       by = c(\"Date\", \"agency_cd\", \"site_no\")     ) %>%     arrange(Date) }  dailyQ <- dailyQ %>%   mutate(     rollMean = rollmean(Flow, 30, fill = NA, align = \"center\"),     day.of.year = as.numeric(strftime(Date,       format = \"%j\"     ))   )"},{"path":"/articles/movingAverages.html","id":"calculate-historical-percentiles","dir":"Articles","previous_headings":"","what":"Calculate historical percentiles","title":"Calculating Moving Averages and Historical Flow Quantiles","text":"can use quantile function calculate historical percentile flows. use loess function smoothing. argument smooth.span defines much smoothing applied. get smooth transistion start graph, can add include earlier year plotted end.","code":"summaryQ <- dailyQ %>%   group_by(day.of.year) %>%   summarize(     p75 = quantile(rollMean, probs = .75, na.rm = TRUE),     p25 = quantile(rollMean, probs = .25, na.rm = TRUE),     p10 = quantile(rollMean, probs = 0.1, na.rm = TRUE),     p05 = quantile(rollMean, probs = 0.05, na.rm = TRUE),     p00 = quantile(rollMean, probs = 0, na.rm = TRUE)   )  current.year <- as.numeric(strftime(Sys.Date(), format = \"%Y\"))  summary.0 <- summaryQ %>%   mutate(     Date = as.Date(day.of.year - 1,       origin = paste0(current.year - 2, \"-01-01\")     ),     day.of.year = day.of.year - 365   ) summary.1 <- summaryQ %>%   mutate(Date = as.Date(day.of.year - 1,     origin = paste0(current.year - 1, \"-01-01\")   )) summary.2 <- summaryQ %>%   mutate(     Date = as.Date(day.of.year - 1,       origin = paste0(current.year, \"-01-01\")     ),     day.of.year = day.of.year + 365   )  summaryQ <- bind_rows(summary.0, summary.1, summary.2)   smooth.span <- 0.3  summaryQ$sm.75 <- predict(loess(p75 ~ day.of.year, data = summaryQ, span = smooth.span)) summaryQ$sm.25 <- predict(loess(p25 ~ day.of.year, data = summaryQ, span = smooth.span)) summaryQ$sm.10 <- predict(loess(p10 ~ day.of.year, data = summaryQ, span = smooth.span)) summaryQ$sm.05 <- predict(loess(p05 ~ day.of.year, data = summaryQ, span = smooth.span)) summaryQ$sm.00 <- predict(loess(p00 ~ day.of.year, data = summaryQ, span = smooth.span))  latest.years <- dailyQ %>%   filter(Date >= as.Date(paste0(current.year - 1, \"-01-01\"))) %>%   mutate(day.of.year = seq_len(nrow(.)))  # Let's just take the middle chunk: summaryQ <- summaryQ %>%   filter(day.of.year %in% 1:365)  summaryQ <- summaryQ %>%   bind_rows(     summaryQ,     summaryQ   ) %>%   mutate(day.of.year = seq_len(nrow(.)) - 365)"},{"path":"/articles/movingAverages.html","id":"plot-using-base-r","dir":"Articles","previous_headings":"","what":"Plot using base R","title":"Calculating Moving Averages and Historical Flow Quantiles","text":"Many graphical requirements defined USGS difficult achieve ggplot2. Base R plotting can used obtain types graphs: Simple 30-day moving average daily flow plot using base R","code":"title.text <- paste0(   stationInfo$station_nm, \"\\n\",   \"Provisional Data - Subject to change\\n\",   \"Record Start = \", min(dailyQ$Date),   \"  Number of years = \",   as.integer(as.numeric(difftime(     time1 = max(dailyQ$Date),     time2 = min(dailyQ$Date),     units = \"weeks\"   )) / 52.25),   \"\\nDate of plot = \", Sys.Date(),   \"  Drainage Area = \", stationInfo$drain_area_va, \"mi^2\" )  mid.month.days <- c(15, 45, 74, 105, 135, 166, 196, 227, 258, 288, 319, 349) month.letters <- c(\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\") start.month.days <- c(1, 32, 61, 92, 121, 152, 182, 214, 245, 274, 305, 335) label.text <- c(\"Normal\", \"Drought Watch\", \"Drought Warning\", \"Drought Emergency\")  plot(latest.years$day.of.year, latest.years$rollMean,   ylim = c(1, 1000), xlim = c(1, 733),   log = \"y\", axes = FALSE, type = \"n\", xaxs = \"i\", yaxs = \"i\",   ylab = \"30-day moving ave\",   xlab = \"\" ) title(title.text, cex.main = 0.75) polygon(c(summaryQ$day.of.year, rev(summaryQ$day.of.year)),   c(summaryQ$sm.75, rev(summaryQ$sm.25)),   col = \"darkgreen\", border = FALSE ) polygon(c(summaryQ$day.of.year, rev(summaryQ$day.of.year)),   c(summaryQ$sm.25, rev(summaryQ$sm.10)),   col = \"yellow\", border = FALSE ) polygon(c(summaryQ$day.of.year, rev(summaryQ$day.of.year)),   c(summaryQ$sm.10, rev(summaryQ$sm.05)),   col = \"orange\", border = FALSE ) polygon(c(summaryQ$day.of.year, rev(summaryQ$day.of.year)),   c(summaryQ$sm.05, rev(summaryQ$sm.00)),   col = \"red\", border = FALSE ) lines(latest.years$day.of.year, latest.years$rollMean,   lwd = 2, col = \"black\" ) abline(v = 366) axis(2, las = 1, at = c(1, 100, 1000), tck = -0.02) axis(2, at = c(seq(1, 90, by = 10)), labels = NA, tck = -0.01) axis(2, at = c(seq(100, 1000, by = 100)), labels = NA, tck = -0.01) axis(1,   at = c(mid.month.days, 365 + mid.month.days),   labels = rep(month.letters, 2),   tick = FALSE, line = -0.5, cex.axis = 0.75 ) axis(1,   at = c(start.month.days, 365 + start.month.days),   labels = NA, tck = -0.02 ) axis(1,   at = c(182, 547), labels = c(current.year - 1, current.year),   line = .5, tick = FALSE ) legend(\"bottom\", label.text,   horiz = TRUE,   fill = c(\"darkgreen\", \"yellow\", \"orange\", \"red\"),   inset = c(0, 0), xpd = TRUE, bty = \"n\", cex = 0.75 ) box()"},{"path":"/articles/movingAverages.html","id":"plot-using-ggplot2","dir":"Articles","previous_headings":"","what":"Plot using ggplot2","title":"Calculating Moving Averages and Historical Flow Quantiles","text":"Finally, can also try create graph using ggplot2 package. following script shows simple way re-create graph ggplot2 effort imitating desired style: Simple 30-day moving average daily flow plot using ggplot2 Next, can play various options better job imitate style: Detailed 30-day moving average daily flow plot","code":"library(ggplot2)  simple.plot <- ggplot(data = summaryQ, aes(x = day.of.year)) +   geom_ribbon(aes(ymin = sm.25, ymax = sm.75, fill = \"Normal\")) +   geom_ribbon(aes(ymin = sm.10, ymax = sm.25, fill = \"Drought Watch\")) +   geom_ribbon(aes(ymin = sm.05, ymax = sm.10, fill = \"Drought Warning\")) +   geom_ribbon(aes(ymin = sm.00, ymax = sm.05, fill = \"Drought Emergency\")) +   scale_y_log10(limits = c(1, 1000)) +   geom_line(data = latest.years, aes(x = day.of.year, y = rollMean, color = \"30-Day Mean\"), size = 2) +   geom_vline(xintercept = 365)  simple.plot styled.plot <- simple.plot +   scale_x_continuous(     breaks = c(mid.month.days, 365 + mid.month.days),     labels = rep(month.letters, 2),     expand = c(0, 0),     limits = c(0, 730)   ) +   annotation_logticks(sides = \"l\") +   expand_limits(x = 0) +   annotate(     geom = \"text\",     x = c(182, 547),     y = 1,     label = c(current.year - 1, current.year), size = 4   ) +   theme_bw() +   theme(     axis.ticks.x = element_blank(),     panel.grid.major = element_blank(),     panel.grid.minor = element_blank()   ) +   labs(list(     title = title.text,     y = \"30-day moving ave\", x = \"\"   )) +   scale_fill_manual(     name = \"\", breaks = label.text,     values = c(\"red\", \"orange\", \"yellow\", \"darkgreen\")   ) +   scale_color_manual(name = \"\", values = \"black\") +   theme(legend.position = \"bottom\")  styled.plot"},{"path":"/articles/nldi.html","id":"navigation-analogy","dir":"Articles","previous_headings":"","what":"Navigation Analogy","title":"Network Linked Data Index: `dataRetrieval`","text":"Imagine want know UCSB using Google Maps. asking entity ‘UCSB’ get information related feature (links, operating hours, photos) things nearby.  UCSB via Google Maps  Imagine want travel UCSB UCLA know need gas along way. Google Maps might use UCSB origin ask directions UCLA include gas stations along route. Gas stations UCSB UCLA  NLDI works provide functionality hydrologic network allowing users discover known features, navigate along route, find features route. primary difference navigation occurs hydrologic network rather transportation network. service now available part dataRetrieval package findNLDI function. Like routing service, three types information can provide findNLDI. include: feature discover direction(s) travel feature types features search along way discussed using following packages:","code":"library(dplyr) # Data frame manipulation library(ggplot2) # Plotting library(patchwork) # Arranging plots library(dataRetrieval) # The star of the show!"},{"path":"/articles/nldi.html","id":"whats-available","dir":"Articles","previous_headings":"","what":"What’s available?","title":"Network Linked Data Index: `dataRetrieval`","text":"First, need know features indexed NLDI. current offerings can found using get_nldi_sources, new features regularly added. time writing (2023-01-03), 12 data sets indexed NHDPlus cataloged NLDI.","code":"get_nldi_sources()"},{"path":"/articles/nldi.html","id":"featureorigin-discovery","dir":"Articles","previous_headings":"","what":"Feature/Origin discovery","title":"Network Linked Data Index: `dataRetrieval`","text":"Features can requested two primary ways: Using native data set identifier, using location. core feature set NLDI include NHD flowlines, USGS NWIS locations, WQP locations, HUC12 pour points. available arguments findNLDI can used request feature object.","code":""},{"path":"/articles/nldi.html","id":"by-identifier","dir":"Articles","previous_headings":"Feature/Origin discovery","what":"By Identifier","title":"Network Linked Data Index: `dataRetrieval`","text":"illustrative example, NHDPlus features can requested COMID NHDPlusV2 data set. returned simple features object contains native data set identifier (“identifier”), sourceName native data set, indexed NHD COMID (case duplicate since NHD feature requested). example , see geometry column type LINESTRING. keep dataRetrieval lightweight, sf package dependency. Instead, sf installed - no_sf = TRUE - sourceName, comid, identifier returned. provide another example, can request NLDI representation USGS NWIS gauge 11120000 sf “non-sf” way. Features indexed NHDPlus returned POINT objects. sf enabled, sourceName, identifier, X, Y geometry (sfc) returned. sf available, geometry dropped X Y values retained. NLDI feature found get_nldi_source can requested passing type/ID pair list origin argument. allow networking capabilities offered dataRetrieval grow naturally NLDI . example, can use origin argument request features don’t offer specific parameter.","code":"findNLDI(comid = 101) #> $origin #> Simple feature collection with 1 feature and 3 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -94.64845 ymin: 31.0838 xmax: -94.62997 ymax: 31.09915 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 4 #>   sourceName    identifier comid                                        geometry #>   <chr>         <chr>      <chr>                                <LINESTRING [°]> #> 1 NHDPlus comid 101        101   (-94.64845 31.09915, -94.64803 31.09871, -94.6… findNLDI(comid = 101, no_sf = TRUE) #> $origin #>      sourceName identifier comid #> 1 NHDPlus comid        101   101 # local sf installation findNLDI(nwis = \"11120000\") #> $origin #> Simple feature collection with 1 feature and 8 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -119.8118 ymin: 34.42472 xmax: -119.8118 ymax: 34.42472 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 9 #>   sourceName               identifier    comid measure reach…¹ name      X     Y #>   <chr>                    <chr>         <chr>   <dbl> <chr>   <chr> <dbl> <dbl> #> 1 NWIS Surface Water Sites USGS-11120000 1759…    92.5 180600… ATAS… -120.  34.4 #> # … with 1 more variable: geometry <POINT [°]>, and abbreviated variable name #> #   ¹​reachcode # No sf use/installation findNLDI(nwis = \"11120000\", no_sf = TRUE) #> $origin #>                 sourceName    identifier    comid  measure      reachcode #> 1 NWIS Surface Water Sites USGS-11120000 17595429 92.50523 18060013000423 #>                        name         X        Y #> 1 ATASCADERO C NR GOLETA CA -119.8118 34.42472 # Water Data Exchange 2.0 Site CA_45206 findNLDI(origin = list(\"wade\" = \"CA_45206\")) #> named list()"},{"path":"/articles/nldi.html","id":"location-longitudelatitude","dir":"Articles","previous_headings":"Feature/Origin discovery","what":"Location (longitude/latitude)","title":"Network Linked Data Index: `dataRetrieval`","text":"don’t know feature ID, longitude/latitude (X,Y) pair sf/sfc POINT object can passed location argument. identify NHDPlus catchment location fall within return associated NHDPlusV2 flowline.","code":"# Request by coordinates findNLDI(location = c(-115, 40)) #> $origin #> Simple feature collection with 1 feature and 3 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -115.0326 ymin: 40.04013 xmax: -115.0182 ymax: 40.05183 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 4 #>   sourceName    identifier comid                                        geometry #>   <chr>         <chr>      <chr>                                <LINESTRING [°]> #> 1 NHDPlus comid 946060315  946060315 (-115.0182 40.05183, -115.0185 40.05176, -… # Request by sf/sfc POINT object ucsb <- sf::st_sfc(sf::st_point(c(-119.8458, Y = 34.4146)), crs = 4326) findNLDI(location = ucsb) #> $origin #> Simple feature collection with 1 feature and 3 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -119.8823 ymin: 34.40438 xmax: -119.8256 ymax: 34.4179 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 4 #>   sourceName    identifier comid                                        geometry #>   <chr>         <chr>      <chr>                                <LINESTRING [°]> #> 1 NHDPlus comid 948060316  948060316 (-119.8823 34.41072, -119.8822 34.4106, -1…"},{"path":"/articles/nldi.html","id":"navigation","dir":"Articles","previous_headings":"","what":"Navigation","title":"Network Linked Data Index: `dataRetrieval`","text":"feature (comid, huc12, nwis, wqp, origin) location, four modes navigation available include: UT: Upper Tributary UM: Upper Mainstream DM: Downstream Tributary DD: Downstream Diversions example view navigation types can seen NWIS site 11109000. NLDI Navigation Options One modes navigation can supplied nav argument. example can ask navigate along upper mainstem (UM) COMID 101. along upper mainstem (UM) upper tributary (UT) COMID 101. cases returned named list includes origin flowlines along requested navigation. sf enabled, returned object flowpath navigation vector COMIDs.","code":"summarize.nldi <- function(input) {   data.frame(     name = names(input),     class = sapply(input, class)[1],     row.names = NULL   ) %>%     mutate(feature_count = ifelse(class == \"sf\", sapply(input, nrow),       sapply(input, length)     )) }   findNLDI(comid = 101, nav = \"UM\") %>%   summarize.nldi() #>           name class feature_count #> 1       origin    sf             1 #> 2 UM_flowlines    sf            14 findNLDI(comid = 101, nav = c(\"UM\", \"UT\")) %>%   summarize.nldi() #>           name class feature_count #> 1       origin    sf             1 #> 2 UM_flowlines    sf            14 #> 3 UT_flowlines    sf           325 findNLDI(comid = 101, nav = c(\"UM\", \"DM\"), no_sf = TRUE) %>%   summarize.nldi() #>           name      class feature_count #> 1       origin data.frame             3 #> 2 UM_flowlines data.frame            14 #> 3 DM_flowlines data.frame            43"},{"path":"/articles/nldi.html","id":"searching-along-the-navigation","dir":"Articles","previous_headings":"","what":"Searching along the Navigation","title":"Network Linked Data Index: `dataRetrieval`","text":"Like gas station example, features listed get_nldi_sources can searched along network, example, can find NWIS gauges, upper tributary, COMID 101. course, one resource can requested, example, lets replicate previous search, time adding Water Quality Points returned list: Note flowlines longer default return navigation new feature requested. retain flowlines, must explicitly requested.","code":"findNLDI(comid = 101, nav = \"UT\", find = \"nwis\") %>%   summarize.nldi() #>          name class feature_count #> 1      origin    sf             1 #> 2 UT_nwissite    sf             2 findNLDI(comid = 101, nav = \"UT\", find = c(\"nwis\", \"wqp\")) %>%   summarize.nldi() #>          name class feature_count #> 1      origin    sf             1 #> 2 UT_nwissite    sf             2 #> 3      UT_WQP    sf            29 findNLDI(comid = 101, nav = \"UT\", find = c(\"nwis\", \"flowlines\")) %>%   summarize.nldi() #>           name class feature_count #> 1       origin    sf             1 #> 2  UT_nwissite    sf             2 #> 3 UT_flowlines    sf           325"},{"path":"/articles/nldi.html","id":"upstream-basin-boundary","dir":"Articles","previous_headings":"Searching along the Navigation","what":"Upstream Basin Boundary","title":"Network Linked Data Index: `dataRetrieval`","text":"Upstream Basin Boundary unique object can found feature adding “basin” find. Basins geometries specific attribute data. Therefore basins can returned sf installed. Otherwise, result 0 column data.frame","code":"# with sf findNLDI(comid = 101, find = \"basin\") %>%   summarize.nldi() #>     name class feature_count #> 1 origin    sf             1 #> 2  basin    sf             1 # No sf findNLDI(comid = 101, find = \"basin\", no_sf = TRUE) %>%   summarize.nldi() #>     name      class feature_count #> 1 origin data.frame             3 #> 2  basin data.frame             0"},{"path":"/articles/nldi.html","id":"distance-constraints","dir":"Articles","previous_headings":"Searching along the Navigation","what":"Distance Constraints","title":"Network Linked Data Index: `dataRetrieval`","text":"cases, particularly DM DD navigation, network can extend hundreds kilometers. can limit (extend) distance search using distance_km argument. name implies value provided maximum kilometers want search features. default distance_km 100.","code":"# Default 100 km findNLDI(comid = 101, nav = \"DM\", find = c(\"nwis\", \"wqp\")) %>%   summarize.nldi() #>          name class feature_count #> 1      origin    sf             1 #> 2 DM_nwissite    sf             1 #> 3      DM_WQP    sf             5 # Extended 200 km search findNLDI(comid = 101, nav = \"DM\", find = c(\"nwis\", \"wqp\"), distance_km = 200) %>%   summarize.nldi() #>          name class feature_count #> 1      origin    sf             1 #> 2 DM_nwissite    sf             8 #> 3      DM_WQP    sf            17"},{"path":"/articles/nldi.html","id":"basic-dataretrieval-integration","dir":"Articles","previous_headings":"","what":"Basic dataRetrieval integration","title":"Network Linked Data Index: `dataRetrieval`","text":"Last, functionality added dataRetrieval package, lets see basic example NLDI tools provide discovery mechanism working dataRetrieval tools. take location near Fountain Creek Colorado Springs, Colorado. example use location origin, navigate upstream along mainstem, search NWIS gauges, use identified siteIDs query streamflow records January 1st, 2020 current day.","code":"# Upstream nwis, flowlines, and basin fountainCreek <- findNLDI(   location = c(-104.780837, 38.786796),   nav = \"UM\",   find = c(\"nwis\", \"basin\", \"flowlines\") )  summarize.nldi(fountainCreek) #>           name class feature_count #> 1       origin    sf             1 #> 2        basin    sf             1 #> 3  UM_nwissite    sf            57 #> 4 UM_flowlines    sf            33 # Identify NLDI sites with daily values \"dv\" #     and record streamflow (\"00060\") #     and recorded flows in 2020 find <- whatNWISdata(sites = gsub(   \"USGS-\", \"\",   fountainCreek$UM_nwissite$identifier )) %>%   filter(     data_type_cd == \"dv\",     parm_cd == \"00060\",     end_date > as.Date(\"2020-01-01\")   ) %>%   mutate(identifier = paste0(\"USGS-\", site_no)) %>%   inner_join(fountainCreek$UM_nwissite, by = \"identifier\") %>%   sf::st_as_sf()  # Extract Streamflow for identified sites Q <- readNWISdv(find$site_no,   parameterCd = \"00060\",   startDate = \"2020-01-01\" ) %>%   renameNWISColumns()  # Plot! ggplot() +   geom_line(     data = Q,     aes(x = Date, y = Flow, col = site_no),     size = .5   ) +   facet_wrap(~site_no, nrow = 4) +   theme_minimal() +   scale_color_brewer(palette = \"Set1\") +   theme(legend.position = \"none\") +   ggplot() +   geom_sf(data = fountainCreek$basin, col = NA) +   geom_sf(data = fountainCreek$UM_flowlines, col = \"blue\", alpha = .5) +   geom_sf(data = find, aes(col = site_no)) +   scale_color_brewer(palette = \"Set1\") +   theme_void() +   labs(     title = \"2020 Streamflow\",     caption = \"Fountain Creek, Colorado\"   ) +   theme(     legend.position = \"none\",     plot.title = element_text(face = \"bold\", hjust = .5)   )"},{"path":"/articles/qwdata_changes.html","id":"changes-to-water-quality-services","dir":"Articles","previous_headings":"","what":"Changes to water quality services","title":"Changes to NWIS QW services","text":"recent announcement NWIS discrete water quality web services shut fall 2023 (continuous water quality data continue made available via NWIS functions). mean dataRetrieval users? water quality data continue available, must accessed Water Quality Portal rather NWIS services. 3 major dataRetrieval functions affected: readNWISqw, whatNWISdata, readNWISdata. vignette describe common workflows conversions needed update existing scripts. vignette provided well advance breaking changes, information guidance provided. need help provided , please reach gs-w-IOW_PO_team@usgs.gov","code":""},{"path":"/articles/qwdata_changes.html","id":"readnwisqw","dir":"Articles","previous_headings":"Changes to water quality services","what":"readNWISqw","title":"Changes to NWIS QW services","text":"Starting version 2.7.9, users notice Warning message using function: Please don’t ignore warning, function eventually removed dataRetrieval package. …instead? function need move readWQPqw. First, ’ll need convert USGS site ID’s something Water Quality Portal accept. Luckily, ’s single line pasting prefix “USGS-”. ’s example: Let’s compare number rows, number columns, attributes return: number rows returned (’s core, data), columns Water Quality Portal output, slightly different attributes. can explore differences attributes: next big task figuring columns WQP output map original columns NWIS output. vast majority workflows need completely re-engineer WQP output back NWIS format. Instead, look workflow determine columns original NWIS output needed preserve integrity workflow. Let’s use dplyr package pull columns used example workflow, make sure NWIS WQP ordered way. explore output WQP, can try find columns include relavent information: Now can start looking results trying decide future workflows setup. decisions example can consider:","code":"site_ids <- c(\"04024430\", \"04024000\") parameterCd <- c(\"34247\", \"30234\", \"32104\", \"34220\") nwisData <- readNWISqw(site_ids, parameterCd) Warning message:                                                                                                NWIS qw web services are being retired. Please see the vignette  'Changes to NWIS QW services' for more information. wqpData <- readWQPqw(paste0(\"USGS-\", site_ids), parameterCd) nrow(nwisData) ## [1] 208 nrow(wqpData) ## [1] 208 ncol(nwisData) ## [1] 36 ncol(wqpData) ## [1] 65 names(attributes(nwisData)) ##  [1] \"names\"        \"class\"        \"row.names\"    \"queryTime\"    \"url\"          ##  [6] \"headerInfo\"   \"comment\"      \"siteInfo\"     \"variableInfo\" \"header\" names(attributes(wqpData)) ## [1] \"names\"        \"class\"        \"row.names\"    \"siteInfo\"     \"variableInfo\" ## [6] \"url\"          \"queryTime\" site_NWIS <- attr(nwisData, \"siteInfo\") site_WQP <- attr(wqpData, \"siteInfo\")  param_NWIS <- attr(nwisData, \"variableInfo\") param_WQP <- attr(wqpData, \"variableInfo\") library(dplyr)  nwisData_relavent <- nwisData %>%   select(     site_no, startDateTime, parm_cd,     hyd_cond_cd, remark_cd, result_va   ) %>%   arrange(startDateTime, parm_cd)  knitr::kable(head(nwisData_relavent)) wqpData_relavent <- wqpData %>%   select(     site_no = MonitoringLocationIdentifier,     startDateTime = ActivityStartDateTime,     parm_cd = USGSPCode,     hyd_cond_cd = HydrologicCondition,     remark_cd = ResultDetectionConditionText,     result_va = ResultMeasureValue   ) %>%   arrange(startDateTime, parm_cd) knitr::kable(head(wqpData_relavent))"},{"path":"/articles/qwdata_changes.html","id":"censored-values","dir":"Articles","previous_headings":"Changes to water quality services > readNWISqw","what":"Censored values","title":"Changes to NWIS QW services","text":"result_va NWIS service came back value. However, data actually censored, meaning know ’s detection limit. lazier coding, might really easy realize values left-censored. , substitute detection levels measured values ’s NA measured value, might great time update workflow handle censored values robustly. probably interested maintaining detection level another column. theoretical workflow, let’s think trying find . Let’s say want know value “left-censored” . Maybe case, make sense column logical TRUE/FALSE. example, text “Detected” “ResultDetectionConditionText” column PLEASE NOTE data may include different messages detection conditions, need examine data carefully. ’s example EGRET package decide “ResultDetectionConditionText” considered censored value:","code":"censored_text <- c(   \"Not Detected\",   \"Non-Detect\",   \"Non Detect\",   \"Detected Not Quantified\",   \"Below Quantification Limit\" )  wqpData_relavent <- wqpData %>%   mutate(left_censored = grepl(paste(censored_text, collapse = \"|\"),     ResultDetectionConditionText,     ignore.case = TRUE   )) %>%   select(     site_no = MonitoringLocationIdentifier,     startDateTime = ActivityStartDateTime,     parm_cd = USGSPCode,     left_censored,     result_va = ResultMeasureValue,     detection_level = DetectionQuantitationLimitMeasure.MeasureValue,     dl_units = DetectionQuantitationLimitMeasure.MeasureUnitCode   ) %>%   arrange(startDateTime, parm_cd)  knitr::kable(head(wqpData_relavent))"},{"path":"/articles/qwdata_changes.html","id":"nwis-codes","dir":"Articles","previous_headings":"Changes to water quality services > readNWISqw","what":"NWIS codes","title":"Changes to NWIS QW services","text":"Another difference going require thoughtful decisions interpret additional NWIS codes. now descriptive text. Columns hyd_cond_cd, samp_type_cd, hyd_event_cd, medium_cd now reported descriptive words rather single letters numbers. responsibility user consider best way deal changes. take full advantage Water Quality Portal, good idea begin move away USGS parameter codes. USGS data includes parameter code, many water quality data sources within Water Quality Portal. compare USGS non-USGS data, ’ll need compare data least characteristic name measured units. many fields may required assure comparing apples--apples. example, “ResultSampleFractionText” important many measured parameters. measurement units found EITHER “ResultMeasure.MeasureUnitCode” column, “DetectionQuantitationLimitMeasure.MeasureUnitCode” column, depending individual measurement censored . USGS codes using analysis, begin move away codes, move text. data looking : convert codes found example: use readNWISqw function, need adjust workflows, may find codes need account . Hopefully section helped get started. include every scenario, may find columns codes conditions need account .","code":"wqpData_relavent_codes <- wqpData %>%   mutate(units = ifelse(is.na(ResultMeasure.MeasureUnitCode),     DetectionQuantitationLimitMeasure.MeasureUnitCode,     ResultMeasure.MeasureUnitCode   )) %>%   select(     parm_cd = USGSPCode,     CharacteristicName, ResultSampleFractionText,     units   ) %>%   distinct()  knitr::kable(wqpData_relavent_codes) wqpData_with_codes <- wqpData %>%   select(     HydrologicCondition, HydrologicEvent,     ActivityTypeCode, ActivityMediaName   ) %>%   distinct()  knitr::kable(head(wqpData_with_codes))"},{"path":"/articles/qwdata_changes.html","id":"whatnwisdata","dir":"Articles","previous_headings":"","what":"whatNWISdata","title":"Changes to NWIS QW services","text":"function continue work service except “qw” (water quality discrete data). “qw” results longer returned. function used discover water quality data available. function replace functionality whatWQPdata: major differences output. NWIS services offers back one row per site/parameter code learn many samples available. currently available Water Quality Portal, however new summary services developed. become available, include new documentation get information.","code":"whatNWIS <- whatNWISdata(   siteNumber = site_ids,   service = \"qw\" ) Warning message:                                                                                                NWIS qw web services are being retired. Please see the vignette  'Changes to NWIS QW services' for more information. whatWQP <- whatWQPdata(siteNumber = paste0(\"USGS-\", site_ids))"},{"path":"/articles/qwdata_changes.html","id":"readnwisdata","dir":"Articles","previous_headings":"","what":"readNWISdata","title":"Changes to NWIS QW services","text":"get water quality data readNWISdata function, receive warning. Note, “qwdata” service. web services deprecated, receive warning. especially common dataRetrieval workflow, lot details . Please reach information needed update workflows. See ?readWQPdata see ways query data Water Quality Portal. Use suggestions convert output readWQPdata function convert WQP output important workflow.","code":"qwData <- readNWISdata(   state_cd = \"WI\",   startDate = \"2000-01-01\",   drain_area_va_min = 50, qw_count_nu = 50,   qw_attributes = \"expanded\",   qw_sample_wide = \"wide\",   list_of_search_criteria = c(     \"state_cd\",     \"drain_area_va\",     \"obs_count_nu\"   ),   service = \"qw\" ) Warning message: NWIS qw web services are being retired. Please see the vignette  'Changes to NWIS QW services' for more information."},{"path":"/articles/qwdata_changes.html","id":"how-to-find-more-help","dir":"Articles","previous_headings":"","what":"How to find more help","title":"Changes to NWIS QW services","text":"changes big, initially sound overwhelming. end, thoughtful changes make understanding USGS water data intuitive. Please reach questions comments : gs-w-IOW_PO_team@usgs.gov","code":""},{"path":"/articles/qwdata_changes.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Changes to NWIS QW services","text":"information preliminary subject revision. provided meet need timely best science. information provided condition neither U.S. Geological Survey U.S. Government may held liable damages resulting authorized unauthorized use information.","code":""},{"path":"/articles/statsServiceMap.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using the dataRetrieval Stats Service","text":"script utilizes new dataRetrieval package access USGS Statistics Web Service. pulling daily mean data using daily value service readNWISdata, using stats service data put context site’s history. retrieving data July 12th Upper Midwest, major storm system recently passed . can modify script look areas dates simply modifying states storm.date objects. run code, recommend either dataRetreival version 2.5.13 (currently latest release CRAN) version 2.6.1 (currently latest Github release).","code":""},{"path":"/articles/statsServiceMap.html","id":"get-the-data","dir":"Articles","previous_headings":"","what":"Get the data","title":"Using the dataRetrieval Stats Service","text":"two separate dataRetrieval calls — one retrieve daily discharge data, one retrieve historical discharge statistics. calls inside loops split smaller pieces, accomodate web service restrictions. daily values service allows single states filter, loop list states. stats service allow requests ten sites, loop iterates groups ten site codes. Retrieving data can take tens seconds. daily value statistics data, two data frames joined site number via dplyr’s left_join function. use pipe send output join na.omit() function. add column final data frame hold color value station.","code":"# example stats service map, comparing real-time current discharge to history for each site # reusable for other state(s) # David Watkins June 2016   library(maps) library(dplyr) library(lubridate) library(dataRetrieval)  # pick state(s) and date states <- c(\"WI\", \"MN\", \"ND\", \"SD\", \"IA\") storm.date <- \"2016-07-12\"  # download each state individually for (st in states) {   stDV <- renameNWISColumns(readNWISdata(     service = \"dv\",     parameterCd = \"00060\",     stateCd = st,     startDate = storm.date,     endDate = storm.date   ))   if (st != states[1]) {     storm.data <- full_join(storm.data, stDV)     sites <- full_join(sites, attr(stDV, \"siteInfo\"))   } else {     storm.data <- stDV     sites <- attr(stDV, \"siteInfo\")   } }  # retrieve stats data, dealing with 10 site limit to stat service requests reqBks <- seq(1, nrow(sites), by = 10) statData <- data.frame() for (i in reqBks) {   getSites <- sites$site_no[i:(i + 9)]   currentSites <- readNWISstat(     siteNumbers = getSites,     parameterCd = \"00060\",     statReportType = \"daily\",     statType = c(\"p10\", \"p25\", \"p50\", \"p75\", \"p90\", \"mean\")   )   statData <- rbind(statData, currentSites) }  statData.storm <- statData[statData$month_nu == month(storm.date) &   statData$day_nu == day(storm.date), ]  finalJoin <- left_join(storm.data, statData.storm) finalJoin <- left_join(finalJoin, sites)  finalJoin[, grep(\"_va\", names(finalJoin))] <- sapply(   finalJoin[     ,     grep(\"_va\", names(finalJoin))   ],   function(x) as.numeric(x) )  # remove sites without current data finalJoin <- finalJoin[!is.na(finalJoin$Flow), ]   # classify current discharge values finalJoin$class <- NA  finalJoin$class[finalJoin$Flow > finalJoin$p75_va] <- \"navy\" finalJoin$class[finalJoin$Flow < finalJoin$p25_va] <- \"red\"  finalJoin$class[finalJoin$Flow > finalJoin$p25_va &   finalJoin$Flow <= finalJoin$p50_va] <- \"green\" finalJoin$class[finalJoin$Flow > finalJoin$p50_va &   finalJoin$Flow <= finalJoin$p75_va] <- \"blue\"  finalJoin$class[is.na(finalJoin$class) &   finalJoin$Flow > finalJoin$p50_va] <- \"cyan\" finalJoin$class[is.na(finalJoin$class) &   finalJoin$Flow < finalJoin$p50_va] <- \"yellow\"  # take a look at the columns that we will plot later: head(finalJoin[, c(\"dec_lon_va\", \"dec_lat_va\", \"class\")]) ##   dec_lon_va dec_lat_va class ## 1  -92.09389   46.63333  navy ## 2  -91.59528   46.53778  navy ## 3  -90.96324   46.59439  navy ## 4  -90.76028   46.60917  navy ## 5  -90.59000   46.39472  navy ## 6  -90.69630   46.48661  navy"},{"path":"/articles/statsServiceMap.html","id":"make-the-static-plot","dir":"Articles","previous_headings":"","what":"Make the static plot","title":"Using the dataRetrieval Stats Service","text":"base map consists two plots. first makes county lines gray background, second overlays heavier state lines. add points stream gage, colored column added finalJoin. finishing details, grconvertXY handy function converts inputs normalized (0-1) coordinate system actual map coordinates, allows legend scale stay relative location different maps. Map discharge percentiles","code":"# convert states from postal codes to full names states <- stateCdLookup(states, outputType = \"fullName\") par(pty = \"s\") map(\"county\", regions = states, fill = TRUE, col = \"gray87\", lwd = 0.5) map(\"state\", regions = states, fill = FALSE, lwd = 2, add = TRUE) points(finalJoin$dec_lon_va,   finalJoin$dec_lat_va,   col = finalJoin$class, pch = 19 ) title(paste(\"Daily discharge value percentile rank\\n\", storm.date), line = 1) par(mar = c(5.1, 4.1, 4.1, 6), xpd = TRUE)  legend.colors <- c(   \"cyan\", \"yellow\",   \"red\",   \"green\", \"blue\",   \"navy\" ) legend.names <- c(   \"Q > P50*\", \"Q < P50*\",   \"Q < P25\",   \"P25 < Q < P50\", \"P50 < Q < P75\",   \"Q > P75\" )  legend(\"bottomleft\",   inset = c(0.01, .01),   legend = legend.names,   pch = 19, cex = 0.75, pt.cex = 1.2,   col = legend.colors,   ncol = 2 ) map.scale(   ratio = FALSE, cex = 0.75,   grconvertX(.07, \"npc\"),   grconvertY(.2, \"npc\") ) text(\"*Other percentiles not available for these sites\",   cex = 0.75,   x = grconvertX(0.2, \"npc\"),   y = grconvertY(-0.08, \"npc\") )"},{"path":"/articles/statsServiceMap.html","id":"make-an-interactive-plot","dir":"Articles","previous_headings":"","what":"Make an interactive plot","title":"Using the dataRetrieval Stats Service","text":"Static maps great papers presentations. possible, interactive maps allow reader flexibility examine data. R leaflet package makes easy create useful interactive maps.","code":"library(leaflet)  finalJoin$popup <- with(finalJoin, paste(   \"<b>\", station_nm,   \"<\/b><\/br>\",   \"Measured Flow:\", Flow,   \"ft3/s<\/br>\",   \"25% historical:\", p25_va,   \"ft3/s<\/br>\",   \"50% historical:\", p50_va,   \"ft3/s<\/br>\",   \"75% historical:\", p75_va,   \"ft3/s\" ))  leafMapStat <- leaflet(data = finalJoin) %>%   addProviderTiles(\"CartoDB.Positron\") %>%   addCircleMarkers(~dec_lon_va, ~dec_lat_va,     color = ~class, radius = 3, stroke = FALSE,     fillOpacity = 0.8, opacity = 0.8,     popup = ~popup   )  leafMapStat <- addLegend(leafMapStat,   position = \"bottomleft\",   colors = legend.colors,   labels = legend.names,   opacity = 0.8 )  leafMapStat"},{"path":"/articles/tutorial.html","id":"package-overview","dir":"Articles","previous_headings":"","what":"Package Overview","title":"dataRetrieval Tutorial","text":"dataRetrieval available Comprehensive R Archive Network (CRAN). dataRetrieval package installed, needs loaded order use functions: several vignettes included within dataRetrieval package. following command open main package introduction: Additionally, function help file. can accessed typing question mark, followed function name R console: function’s help file working examples demonstrate usage. examples may comments “## run”. examples CAN run, just run CRAN maintainers due external service calls. Finally, still questions vignette help files don’t answer, please post issue dataRetrieval GitHub page: https://github.com/USGS-R/dataRetrieval/issues","code":"install.packages(\"dataRetrieval\") library(dataRetrieval) vignette(\"dataRetrieval\", package = \"dataRetrieval\") ?readNWISuv"},{"path":"/articles/tutorial.html","id":"national-water-information-system-nwis","dir":"Articles","previous_headings":"","what":"National Water Information System (NWIS)","title":"dataRetrieval Tutorial","text":"USGS data comes National Water Information System (NWIS). many types data served NWIS. understand services separated, ’s helpful understand terms :","code":""},{"path":"/articles/tutorial.html","id":"usgs-basic-retrievals","dir":"Articles","previous_headings":"National Water Information System (NWIS)","what":"USGS Basic Retrievals","title":"dataRetrieval Tutorial","text":"USGS uses various codes basic retrievals. codes can leading zeros, therefore R need character (“01234567”). Site ID (often 8 15-digits) Full list: https://nwis.waterdata.usgs.gov/usa/nwis/pmcodes Alternatively use readNWISpCode(\"\") Full list: http://help.waterdata.usgs.gov/code/stat_cd_nm_query?stat_nm_cd=%25&fmt=html examples codes: Use readNWISpCode function get information USGS parameter codes. can use “” get full list. use favorite data analysis methods pull need. one example find phosphorous parameter codes: Explore wide variety parameters contain “phosphorus” parameter_nm:","code":"pcode <- readNWISpCode(\"all\")  phosCds <- pcode[grep(\"phosphorus\",   pcode$parameter_nm,   ignore.case = TRUE ), ]  names(phosCds) ## [1] \"parameter_cd\"       \"parameter_group_nm\" \"parameter_nm\"       ## [4] \"casrn\"              \"srsname\"            \"parameter_units\" unique(phosCds$parameter_units) ##  [1] \"ug/l as P\"  \"mg/l as P\"  \"mg/kg as P\" \"ug/l\"       \"mg/kg\"      ##  [6] \"%\"          \"mg/l\"       \"mg/l PO4\"   \"kg/d as P\"  \"lb/day\"     ## [11] \"mg/kg PO4\"  \"mg/m2 as P\" \"lb/d as P\"  \"ug/L as P\"  \"tons/day\"   ## [16] \"ml\"         \"nu\"         \"g\""},{"path":"/articles/tutorial.html","id":"user-friendly-retrievals-nwis","dir":"Articles","previous_headings":"National Water Information System (NWIS) > USGS Basic Retrievals","what":"User-friendly retrievals: NWIS","title":"dataRetrieval Tutorial","text":"Sometimes, know exactly want. know: type data (groundwater, unit, water quality, daily, etc..) USGS site number(s) USGS parameter code(s) Time frame (start end date) can use “user-friendly” functions. functions take 4 inputs (sites, parameter codes, start date, end date), deliver data different NWIS services: Let’s start asking discharge (parameter code = 00060) site right next USGS office Wisconsin (Pheasant Branch Creek). Pheasant Creek example, let’s look data. column names : names columns based parameter statistic codes. many cases, can clean names convenience function renameNWISColumns: returned data also several attributes attached data frame. see attributes : dataRetrieval return attributes: url, siteInfo, variableInfo. Additional attributes available depending data. access attributes: Raw Data Make simple plot see data:  use attributes attached data frame create better labels:","code":"siteNo <- \"05427948\" pCode <- \"00060\" start.date <- \"2017-10-01\" end.date <- \"2018-09-30\"  pheasant <- readNWISuv(   siteNumbers = siteNo,   parameterCd = pCode,   startDate = start.date,   endDate = end.date ) names(pheasant) ## [1] \"agency_cd\"        \"site_no\"          \"dateTime\"         \"X_00060_00000\"    ## [5] \"X_00060_00000_cd\" \"tz_cd\" pheasant <- renameNWISColumns(pheasant) names(pheasant) ## [1] \"agency_cd\"    \"site_no\"      \"dateTime\"     \"Flow_Inst\"    \"Flow_Inst_cd\" ## [6] \"tz_cd\" names(attributes(pheasant)) ## [1] \"names\"         \"row.names\"     \"class\"         \"url\"           ## [5] \"siteInfo\"      \"variableInfo\"  \"disclaimer\"    \"statisticInfo\" ## [9] \"queryTime\" url <- attr(pheasant, \"url\") url ## [1] \"https://nwis.waterservices.usgs.gov/nwis/iv/?site=05427948&format=waterml,1.1&ParameterCd=00060&startDT=2017-10-01&endDT=2018-09-30\" library(ggplot2) ts <- ggplot(   data = pheasant,   aes(dateTime, Flow_Inst) ) +   geom_line() ts parameterInfo <- attr(pheasant, \"variableInfo\") siteInfo <- attr(pheasant, \"siteInfo\")  ts <- ts +   xlab(\"\") +   ylab(parameterInfo$variableDescription) +   ggtitle(siteInfo$station_nm) ts"},{"path":"/articles/tutorial.html","id":"discover-data-nwis","dir":"Articles","previous_headings":"National Water Information System (NWIS)","what":"Discover Data: NWIS","title":"dataRetrieval Tutorial","text":"great know site numbers. don’t? 2 dataRetrieval functions help: whatNWISsites finds sites within specified filter (quicker) whatNWISdata summarizes data within specified filter (information) several ways specify requests. best way discover flexible USGS web services click links see filtering options: http://waterservices.usgs.gov/  Available geographic filters individual site(s), single state, bounding box, HUC (hydrologic unit code). See examples services looking help page readNWISdata function: examples:","code":""},{"path":"/articles/tutorial.html","id":"arizona-example","dir":"Articles","previous_headings":"National Water Information System (NWIS) > Discover Data: NWIS","what":"Arizona Example","title":"dataRetrieval Tutorial","text":"example, let’s see sites ever measured phosphorus Arizona: Now let’s see get back whatNWISdata function: get many columns returned. discovering useful data, last 3 columns return especially helpful. “begin_date”, “end_date”, “count_nu” give good indication much data particular “parm_cd”/“stat_cd”/“data_type_cd” collected.","code":"AZ_sites <- whatNWISsites(   stateCd = \"AZ\",   parameterCd = \"00665\" ) nrow(AZ_sites) ## [1] 586 names(AZ_sites) ## [1] \"agency_cd\"   \"site_no\"     \"station_nm\"  \"site_tp_cd\"  \"dec_lat_va\"  ## [6] \"dec_long_va\" \"colocated\"   \"queryTime\" ##  [1] \"agency_cd\"          \"site_no\"            \"station_nm\"         ##  [4] \"site_tp_cd\"         \"dec_lat_va\"         \"dec_long_va\"        ##  [7] \"coord_acy_cd\"       \"dec_coord_datum_cd\" \"alt_va\"             ## [10] \"alt_acy_va\"         \"alt_datum_cd\"       \"huc_cd\"             ## [13] \"data_type_cd\"       \"parm_cd\"            \"stat_cd\"            ## [16] \"ts_id\"              \"loc_web_ds\"         \"medium_grp_cd\"      ## [19] \"parm_grp_cd\"        \"srs_id\"             \"access_cd\"          ## [22] \"begin_date\"         \"end_date\"           \"count_nu\" AZ_data <- whatNWISdata(   stateCd = \"AZ\",   parameterCd = \"00665\" ) names(AZ_data)"},{"path":"/articles/tutorial.html","id":"additional-nwis-discovery-tools","dir":"Articles","previous_headings":"National Water Information System (NWIS) > Discover Data: NWIS","what":"Additional NWIS discovery tools","title":"dataRetrieval Tutorial","text":"team actively working making data discoverable. now, encourage use interactive mappers : NWIS Mapper: http://maps.waterdata.usgs.gov/mapper/index.html National Water Dashboard: https://dashboard.waterdata.usgs.gov/app/nwd","code":""},{"path":"/articles/tutorial.html","id":"wisconsin-example","dir":"Articles","previous_headings":"National Water Information System (NWIS) > Discover Data: NWIS","what":"Wisconsin Example","title":"dataRetrieval Tutorial","text":"Let’s one example, ’ll look long-term USGS phosphorous data Wisconsin. time, take information whatNWISdata function, filter sites exactly interest, get data. Let’s say want data sites collecting data least 15 years least 300 measurements: Let’s look maximum measured value, number samples: map :","code":"pCode <- c(\"00665\") phWI <- whatNWISdata(   stateCd = \"WI\",   parameterCd = pCode )  library(dplyr) phWI.1 <- phWI %>%   filter(count_nu > 300) %>%   mutate(period = as.Date(end_date) - as.Date(begin_date)) %>%   filter(period > 15 * 365) phos_summary <- phos_WI_data %>%   group_by(site_no) %>%   summarize(     max = max(result_va, na.rm = TRUE),     count = n()   ) %>%   ungroup() %>%   left_join(attr(phos_WI_data, \"siteInfo\"),     by = \"site_no\"   )"},{"path":"/articles/tutorial.html","id":"multi-agency-water-quality-data-from-the-water-quality-portal-wqp","dir":"Articles","previous_headings":"","what":"Multi-Agency Water Quality Data from the Water Quality Portal (WQP)","title":"dataRetrieval Tutorial","text":"dataRetrieval also allows users access data Water Quality Portal. WQP houses data multiple agencies; USGS data comes NWIS database, EPA data comes STORET database (includes many state, tribal, NGO, academic groups). WQP brings data organizations together provides single format verbose output NWIS. get non-NWIS data, need use CharacteristicName instead parameter code.","code":""},{"path":"/articles/tutorial.html","id":"wqp-basic-retrievals","dir":"Articles","previous_headings":"Multi-Agency Water Quality Data from the Water Quality Portal (WQP)","what":"WQP Basic Retrievals","title":"dataRetrieval Tutorial","text":"Much like convenience functions NWIS, ’s simple function retrievals site number parameter code characteristic name known.","code":"nwisQW <- readNWISqw(phWI.1$site_no[1],   parameterCd = \"00665\" ) ncol(nwisQW) ## [1] 36 nrow(nwisQW) ## [1] 362 wqpQW <- readWQPqw(paste0(\"USGS-\", phWI.1$site_no[1]),   parameterCd = \"00665\" ) ncol(wqpQW) ## [1] 67 nrow(wqpQW) ## [1] 362"},{"path":"/articles/tutorial.html","id":"data-discovery-wqp","dir":"Articles","previous_headings":"Multi-Agency Water Quality Data from the Water Quality Portal (WQP)","what":"Data Discovery: WQP","title":"dataRetrieval Tutorial","text":"value Water Quality Portal explore water quality data different sources. following function returns sites collected phosphorus data Wisconsin. ’s way know site collected one sample, thousands. function pretty fast, reports sites data. Similar NWIS, find scope available data, whatWQPdata function: function comes back really useful columns “activityCount” “resultCount”. NWIS query, let’s filter data request sites 300 measurements. data coming many different agencies, important carefully review returned data. instance, “Phosphorus” data comes back many different units. important make smart decisions queried data can used together. Let’s look maximum measured value, number samples:","code":"phosSites <- whatWQPsites(   statecode = \"WI\",   characteristicName = \"Phosphorus\" ) phos_data_available <- whatWQPdata(   statecode = \"WI\",   characteristicName = \"Phosphorus\" ) phos_data_sites_to_get <- phos_data_available %>%   filter(resultCount >= 300)  phosData <- readWQPdata(   siteNumbers = phos_data_sites_to_get$MonitoringLocationIdentifier,   characteristicName = \"Phosphorus\" ) unique(phosData$ResultMeasure.MeasureUnitCode) siteInfo <- attr(phosData, \"siteInfo\")  wiSummary <- phosData %>%   filter(ResultMeasure.MeasureUnitCode %in%     c(\"mg/l\", \"mg/l as P\")) %>%   group_by(MonitoringLocationIdentifier) %>%   summarise(     count = n(),     max = max(ResultMeasureValue, na.rm = TRUE)   ) %>%   left_join(siteInfo, by = \"MonitoringLocationIdentifier\")"},{"path":"/articles/tutorial.html","id":"timetime-zone-discussion","dir":"Articles","previous_headings":"","what":"Time/Time zone discussion","title":"dataRetrieval Tutorial","text":"arguments dataRetrieval functions concerning dates (startDate, endDate) can R Date objects, character strings, long string form “YYYY-MM-DD”. functions include date time, dataRetrieval take information create column POSIXct type. default, date/time POSIXct column converted “UTC”. R, one vector (column data frame) can ONE timezone attribute. Sometimes single state, sites acknowledge daylight savings don’t dataRetrieval queries easily span multiple timezones (switching daylight savings regular time) user can specify single timezone override UTC. allowable tz arguments OlsonNames (see also help file readNWISuv). readNWISqw may create “startDateTime” “endDateTime” data appropriate. columns timezone attribute user-defined “tz_cd” column. originally reported timezones retained “sample_start_time_datum_cd_reported” “sample_end_time_datum_cd_reported” columns.","code":""},{"path":"/articles/tutorial.html","id":"large-data-requests","dir":"Articles","previous_headings":"","what":"Large Data Requests","title":"dataRetrieval Tutorial","text":"increasingly common R users interested large-scale dataRetrieval analysis. can use loop either state codes (stateCd$STATE) HUCs make large requests. without careful planning, requests large complete. tips make queries manageable: Please use multi-thread processes simultaneously request hundreds thousands queries. Take advantage whatWQPdata whatNWISdata functions filter sites don’t need requesting data. Use can faster requests filter full data request much possible. Think using tryCatch, saving data iteration loop, /using make-like data pipeline (example, see drake package). way single query fails, need start . WQP doesn’t always perform well lot filtering arguments request. Even though filters reduce amount data needed transfer, sometimes causes pre-processing request take long times-returning data. ’s bit counterintuitive, trouble getting large requests complete, remove arguments Sample Media, Site Type, things can filtered post-processing script. Another example: sometimes slower error-prone requesting data year--year instead requesting entire period record. Pick single state/HUC/bbox practice data retrievals looping larger sets, optimize ahead time much possible.","code":""},{"path":"/articles/tutorial.html","id":"but-wait-theres-more","dir":"Articles","previous_headings":"","what":"But wait, there’s more!","title":"dataRetrieval Tutorial","text":"two services also functions dataRetrieval, National Groundwater Monitoring Network (NGWMN) Network Linked Data Index (NLDI). functions mature WQP NWIS functions. future blog post bring together functions.","code":""},{"path":"/articles/tutorial.html","id":"national-groundwater-monitoring-network-ngwmn","dir":"Articles","previous_headings":"But wait, there’s more!","what":"National Groundwater Monitoring Network (NGWMN)","title":"dataRetrieval Tutorial","text":"Similar WQP, NGWMN brings groundwater data multiple sources single location. currently dataRetrieval functions included: readNGWMNsites() readNGWMNlevels() readNGWMNdata().","code":""},{"path":"/articles/tutorial.html","id":"network-linked-data-index-nldi","dir":"Articles","previous_headings":"But wait, there’s more!","what":"Network Linked Data Index (NLDI)","title":"dataRetrieval Tutorial","text":"NLDI provides information backbone navigate NHDPlusV2 network discover features indexed network. overview NLDI, see: https://rconnect.usgs.gov/dataRetrieval/articles/nldi.html currently one function dataRetrieval NLDI: findNLDI()","code":""},{"path":"/articles/wqp_large_pull_script.html","id":"large-data-example","dir":"Articles","previous_headings":"","what":"Large data example","title":"Large Data Pulls from Water Quality Portal - A Script-Based Approach","text":"blog sets scenario look total nitrogen data measured streams within contiguous United States sites least 40 measurements 1995 2020.","code":""},{"path":"/articles/wqp_large_pull_script.html","id":"data-download","dir":"Articles","previous_headings":"Large data example","what":"Data download","title":"Large Data Pulls from Water Quality Portal - A Script-Based Approach","text":"First, set loop find sites required data, get data relevant. several ways break geographic part query, bounding box, state, county, hydrologic unit code (HUC). Depending density data, may ideal adjust loop geographic query. Sometimes running single dataRetrieval call comes back “timeout” error. times, requests data spans traditional geographic filters HUC, state, county. cases, may necessary break dataRetrieval call smaller subsets, bind subsets together separately. blog discuss one strategy breaking WQP request. dataRetrieval includes data frame “stateCd” states territories queried either NWIS WQP. example, lower 48 states along Washington, D.C.considered. Use readWQPsummary function, useful function returns information data available particular query. initial query asking nitrogen data streams available particular state. returned data shows many nitrogen samples available site year. , using filtering summaries figure exactly sites meet set scenairo’s needs. readWQPdata function used download actual relevant data. example saves data using saveRDS function individual state. ensures higher likelihood successful completion query. example, failure occurs download loops don’t finish. case, states successfully downloaded data skipped, re-run states didn’t work. Saving “RDS” file also benefits retaining attributes data. Notice another feature loop using tryCatch dataRetrieval calls. allows loop continue even one states failed reason. following can included loop , saving later allows flexibility raw data (e.g., leaving data filtering data ). Although creating empty data frame filling data later efficient way go, binding rows flexible easy conceptualize. data download scenario, wasn’t huge bottleneck using “dyplr::bind_rows”, place reconsider next section seems taking long, creating empty data frame may considered solution. next loop shown opens file, pulls data need analysis, binds state one large data frame. Notice “ResultMeasureValue” changes character vector. default, dataRetrieval try convert column numeric. Sometimes however, can’t done actual character values results. Therefore, retain information, sure state’s “ResultMeasureValue” column character (information ).","code":"# Load packages library(dataRetrieval) library(dplyr)  # state code information for the 48 conterminous United States plus DC: state_cd_cont <- stateCd[c(2,4:12,14:52),]  rownames(state_cd_cont) <- seq(length=nrow(state_cd_cont)) # reset row sequence  for(i in seq_len(nrow(state_cd_cont))){      state_cd <- state_cd_cont$STATE[i]   state_nm <- state_cd_cont$STUSAB[i]   message(\"Getting: \", state_nm)      df_summary <- tryCatch({     readWQPsummary(statecode = state_cd,                    CharacteristicName = \"Nitrogen\",                    siteType = \"Stream\")   },    error=function(cond) {     message(paste(\"No data in:\", state_nm))     break()   })      sites <- df_summary |>      filter(YearSummarized >= 1995,            YearSummarized <= 2020) |>      group_by(MonitoringLocationIdentifier, MonitoringLocationName) |>      summarise(start_year = min(YearSummarized, na.rm = TRUE),               end_year = max(YearSummarized, na.rm = TRUE),               count_activity = sum(ActivityCount, na.rm = TRUE),               count_result = sum(ResultCount, na.rm = TRUE)) |>      ungroup() |>      filter(count_activity >= 40)      if(nrow(sites) > 0){     df_state <- tryCatch({       readWQPdata(siteid = sites$MonitoringLocationIdentifier,                   CharacteristicName = \"Nitrogen\",                   startDateLo = \"1995-01-01\",                   startDateHi = \"2020-12-31\",                   sampleMedia = \"Water\",                    ignore_attributes = FALSE)       # turning off attributes speeds things       # up, but then you'll need to do the site info later.       # But...you'll have filtered the number of sites down.       # If you think that'll be a lot of sites filtered out,        # set ignore_attributes to TRUE     },      error=function(cond) {       message(paste(\"No data in:\", state_nm))     })   }      if(nrow(df_state) > 0){          # I would write the data here, just in case:     saveRDS(df_state, file = paste0(state_nm, \"_raw_data.rds\"))     # You could slim it down here,     # but if later you decide you wanted something you filtered     # out here, you'd need to remember to get the data again     # For example:     df_state2 <- df_state |>        filter(ResultSampleFractionText == \"Total\") |>        group_by(MonitoringLocationIdentifier) |>        mutate(count = n()) |>        filter(count > 40) |>        ungroup()             } else {     message(\"No data in:\", state_nm)   }       } all_nitrogen <- data.frame() # for(state in stateCd$STUSAB){ for(state in state_cd_cont$STUSAB){   state_df <- tryCatch({     readRDS(paste0(state, \"_raw_data.rds\"))   })   if(nrow(state_df) > 0){     df_slim <- state_df |>       mutate(ResultMeasureValue = as.character(ResultMeasureValue),              `DetectionQuantitationLimitMeasure.MeasureValue` = as.character(`DetectionQuantitationLimitMeasure.MeasureValue`)) |>       filter(ActivityMediaSubdivisionName %in%                c(\"Surface Water\")|                is.na(ActivityMediaSubdivisionName),              ResultSampleFractionText %in% c(\"Total\")) |>       left_join(attr(state_df, \"siteInfo\") |>                   select(MonitoringLocationIdentifier,                          dec_lat_va, dec_lon_va,                          MonitoringLocationName,                          MonitoringLocationTypeName,                          HUCEightDigitCode),                 by = \"MonitoringLocationIdentifier\")          all_nitrogen <- bind_rows(all_nitrogen, df_slim)   }    }"},{"path":"/articles/wqp_large_pull_script.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Large Data Pulls from Water Quality Portal - A Script-Based Approach","text":"use trade, firm, product names descriptive purposes imply endorsement U.S. Government.","code":""},{"path":"/articles/wqp_large_pull_targets.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Large Data Pulls from Water Quality Portal - A Pipeline-Based Approach","text":"Water Quality Portal (WQP) database aggregates standardizes discrete water quality data numerous federal, state, tribal, monitoring agencies. WQP enables access retrieval 297,000,000 water quality records (Read et al. 2017) web services application programming interface (API) can called programmatically using dataRetrieval package R. Downloading data WQP represents common pattern across USGS data teams. post, highlight example data pipeline increase reusability, reproducibility, efficiency WQP data workflows. post alternative method script-based workflow presented Large Data Pulls Water Quality Portal - Script-Based Approach. ’ve designed large-scale data pulls mind, example pipeline work spatial temporal scale.","code":""},{"path":"/articles/wqp_large_pull_targets.html","id":"why-targets","dir":"Articles","previous_headings":"","what":"Why targets?","title":"Large Data Pulls from Water Quality Portal - A Pipeline-Based Approach","text":"workflow described uses targets package leverage modular functions, dependency tracking, automated workflows inventory download data Water Quality Portal. Using targets allows user develop maintainable pipeline tracks changes time re-run portions workflow date due changes. basic ingredient targets workflow script file named _targets.R. file used define configure steps analysis pipeline connections . connecting individual analysis steps (also known targets) _targets file, targets package can track relationships connection. Analysis steps precede given step interest considered “upstream” analysis steps follow considered “downstream”. connections established, targets can also visualize relationships network graph like one shown . WQP pipeline structured various inputs - including date range, spatial extent, parameters interest, /specific arguments pass along WQP queries - can modified within _targets.R file.","code":""},{"path":"/articles/wqp_large_pull_targets.html","id":"pulling-data-from-the-water-quality-portal","dir":"Articles","previous_headings":"","what":"Pulling data from the Water Quality Portal","title":"Large Data Pulls from Water Quality Portal - A Pipeline-Based Approach","text":"WQP targets pipeline divided three phases divide workflow: Inventory sites records available WQP Download inventoried data Harmonize, clean, downloaded data prepare dataset analysis post focus carry bulk data pulls using first two phases pipeline.","code":""},{"path":"/articles/wqp_large_pull_targets.html","id":"decide-which-characteristic-names-to-query","dir":"Articles","previous_headings":"Pulling data from the Water Quality Portal","what":"Decide which characteristic names to query","title":"Large Data Pulls from Water Quality Portal - A Pipeline-Based Approach","text":"first step decide water quality parameters included data pull. One challenge posed aggregated WQP database many characteristic names may refer water quality parameter (e.g., temperature records can take different values CharacteristicName, including \"Temperature\" \"Temperature, water\"). WQP pipeline includes configuration file help map various WQP characteristics onto commonly-used parameter groups (1_inventory/cfg/wqp_codes.yml). interested compiling temperature data, define parameter group within _targets.R. characteristic names belonging “temperature” parsed p1_char_names create vector CharacteristicName values used input WQP query. values CharacteristicName include may vary depending needs specific project entries considered valid WQP, can change time. accommodate variability, configuration file can edited omit certain characteristic names include new ones. example, might think new characteristic name contains temperature records add configuration file. simple example illustrates decision users WQP data must make, can sometimes difficult confidence (.e., “temp” really valid characteristic name?). Two pipeline features designed assist user making decisions. First, requested characteristic names configuration file checked list valid entries WQP, notify user characteristic name valid.  can see newly-added characteristic name “temp” valid entry can omitted configuration file. Second, user may wonder whether characteristic names might missed. pipeline includes target p1_similar_char_names_txt uses fuzzy string matching check valid characteristics similar requested parameters, return output file can evaluated user. p1_char_names end list characteristic names use query:","code":"> tar_load(p1_char_names) > p1_char_names [1] \"Temperature\"               \"Temperature, sample\"       \"Temperature, water\"        \"Temperature, water, deg F\" >"},{"path":"/articles/wqp_large_pull_targets.html","id":"define-the-area-of-interest","dir":"Articles","previous_headings":"Pulling data from the Water Quality Portal","what":"Define the area of interest","title":"Large Data Pulls from Water Quality Portal - A Pipeline-Based Approach","text":"next step define spatial extent data pull. example, requesting data triangular “watershed” northwest Philadelphia, PA, ’ve specified _targets.R using set latitude longitude coordinates. Although use spatial coordinates, user also easily use , predefined boundaries replacing targets p1_AOI p1_AOI_sf targets download read external shapefile: example, area interest relatively small probably request temperature data within boundary triangular watershed without issue. However, wanted download WQP data full state Pennsylvania? result much bigger request! WQP pipeline built around central idea smaller queries WQP likely succeed therefore, workflows pull WQP data benefit dividing larger requests smaller ones. One way break larger data pulls using set grid cells define spatial extent multiple, smaller queries , combined, represent data inventory full area interest. size grid cell can customized user, using 1 degree cell sizes results set five grid cells overlap example watershed:","code":"# Specify coordinates that define the spatial area of interest # lat/lon are referenced to WGS84 coords_lon <- c(-77.063, -75.333, -75.437) coords_lat <- c(40.547, 41.029, 39.880) # Download a shapefile containing the Delaware River Basin boundary   tar_target(     p1_shp_zip,     {       fileout <- \"1_inventory/out/drbbnd.zip\"       utils::download.file(\"https://www.state.nj.us/drbc/library/documents/GIS/drbbnd.zip\",                   destfile = fileout,                   mode = \"wb\", quiet = TRUE)       fileout     },     format = \"file\"   ),  # Unzip the shapefile and read in as an sf polygon object   tar_target(     p1_AOI_sf,     {       savedir <- tools::file_path_sans_ext(p1_shp_zip)       unzip(zipfile = p1_shp_zip, exdir = savedir, overwrite = TRUE)       sf::st_read(paste0(savedir,\"/drb_bnd_arc.shp\"), quiet = TRUE) %>%         sf::st_cast(.,\"POLYGON\")     }   ),"},{"path":"/articles/wqp_large_pull_targets.html","id":"inventory-the-data-before-downloading","dir":"Articles","previous_headings":"Pulling data from the Water Quality Portal","what":"Inventory the data before downloading","title":"Large Data Pulls from Water Quality Portal - A Pipeline-Based Approach","text":"use targets “branching” capabilities apply (map) data inventory download functions grid cell overlaps area interest. user can quickly reference number sites records returned inventory referencing saved log file. using pipeline along git version control, log file also allows user readily track changes data time.","code":""},{"path":"/articles/wqp_large_pull_targets.html","id":"little-by-little-break-up-the-inventoried-sites-to-prepare-for-download","dir":"Articles","previous_headings":"Pulling data from the Water Quality Portal","what":"Little by little: break up the inventoried sites to prepare for download","title":"Large Data Pulls from Water Quality Portal - A Pipeline-Based Approach","text":"initial data inventory lets us know many sites records can expect unique CharacteristicName query. actually downloading data, bin inventoried sites within grid cell distinct download groups total number records given download group exceed user-specified maximum threshold (defaults 250,000 records per download group). binning step acts another safeguard timeout issues large data requests, also allows us take advantage targets dependency tracking efficiently build update data pipeline. example, re-download data records WQP just added new characteristic name new sites recently uploaded WQP detected inventory. targets update data subsets become “outdated” upstream change.","code":""},{"path":"/articles/wqp_large_pull_targets.html","id":"download-the-data","dir":"Articles","previous_headings":"Pulling data from the Water Quality Portal","what":"Download the data!","title":"Large Data Pulls from Water Quality Portal - A Pipeline-Based Approach","text":"’re finally ready download data Water Quality Portal mapping function fetch_wqp_data() unique download group recombining data p2_wqp_data_aoi. check downloaded data, compare expected number sites records p1_wqp_inventory_summary_csv number sites records actually downloaded, inform user result:","code":""},{"path":"/articles/wqp_large_pull_targets.html","id":"updating-the-data-pull","dir":"Articles","previous_headings":"Pulling data from the Water Quality Portal","what":"Updating the data pull","title":"Large Data Pulls from Water Quality Portal - A Pipeline-Based Approach","text":"mentioned , targets dependency tracking allows us efficiently update pipeline expand region interest without re-pulling grids already queried. illustrate, say decide expand analysis include areas west initial focal watershed. map shows area interest now overlaps six grid cells instead five, five original grids still included query. Using common scripting workflows usually just re-pull data even though time-consuming.  However, targets recognizes data already inventoried five grid cells query data newly-added grid, 46902:","code":""},{"path":"/articles/wqp_large_pull_targets.html","id":"customizing-the-pipeline","dir":"Articles","previous_headings":"","what":"Customizing the pipeline","title":"Large Data Pulls from Water Quality Portal - A Pipeline-Based Approach","text":"goal take example pipeline tailor projects. Users can customize spatial extent, date range, list water quality parameters interest, add new functions harmonizing data various water quality constituents.","code":""},{"path":"/articles/wqp_large_pull_targets.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Large Data Pulls from Water Quality Portal - A Pipeline-Based Approach","text":"use trade, firm, product names descriptive purposes imply endorsement U.S. Government.","code":""},{"path":"/articles/wqp_large_pull_targets.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Large Data Pulls from Water Quality Portal - A Pipeline-Based Approach","text":"Read, E. K., Carr, L., De Cicco, L., Dugan, H. ., Hanson, P. C., Hart, J. ., Kreft, J., Read, J. S., Winslow, L. . (2017), Water quality data national-scale aquatic research: Water Quality Portal, Water Resour. Res., 53, 1735– 1745, doi:10.1002/2016WR019993.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Laura DeCicco. Author, maintainer. Robert Hirsch. Author. David Lorenz. Author. Jordan Read. Contributor. Jordan Walker. Contributor. Lindsay Carr. Contributor. David Watkins. Author. David Blodgett. Contributor. Mike Johnson. Author. Aliesha Krall. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"De Cicco, L.., Hirsch, R.M., Lorenz, D., Watkins, W.D., Johnson, M., 2022, dataRetrieval: R packages discovering retrieving water data available Federal hydrologic web services, v.2.7.12, doi:10.5066/P9X4L3GE","code":"@Manual{,   author = {Laura A. {De Cicco} and David Lorenz and Robert M. Hirsch and William Watkins and Mike Johnson},   title = {dataRetrieval: R packages for discovering and retrieving water data available from U.S. federal hydrologic web services},   publisher = {U.S. Geological Survey},   address = {Reston, VA},   version = {2.7.12},   institution = {U.S. Geological Survey},   year = {2022},   doi = {10.5066/P9X4L3GE},   url = {https://code.usgs.gov/water/dataRetrieval}, }"},{"path":"/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributions - interactions surrounding- project abide USGS Code Scientific Conduct. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"/DISCLAIMER.html","id":null,"dir":"","previous_headings":"","what":"Disclaimer","title":"Disclaimer","text":"software preliminary provisional subject revision. provided meet need timely best science. software received final approval U.S. Geological Survey (USGS). warranty, expressed implied, made USGS U.S. Government functionality software related material shall fact release constitute warranty. software provided condition neither USGS U.S. Government shall held liable damages resulting authorized unauthorized use software.","code":""},{"path":"/index.html","id":"dataretrieval-","dir":"","previous_headings":"","what":"Retrieval Functions for USGS and EPA Hydrology and Water Quality Data","title":"Retrieval Functions for USGS and EPA Hydrology and Water Quality Data","text":"dataRetrieval package created simplify process loading hydrologic data R environment. designed retrieve major data types U.S. Geological Survey (USGS) hydrology data available Web, well data Water Quality Portal (WQP), currently houses water quality data Environmental Protection Agency (EPA), U.S. Department Agriculture (USDA), USGS. Direct USGS data obtained service called National Water Information System (NWIS). complete tutorial information, see: https://rconnect.usgs.gov/dataRetrieval/ https://waterdata.usgs.gov/blog/dataretrieval/","code":""},{"path":[]},{"path":"/index.html","id":"usgs","dir":"","previous_headings":"","what":"USGS","title":"Retrieval Functions for USGS and EPA Hydrology and Water Quality Data","text":"","code":"library(dataRetrieval) # Choptank River near Greensboro, MD siteNumber <- \"01491000\" ChoptankInfo <- readNWISsite(siteNumber) parameterCd <- \"00060\"  # Raw daily data: rawDailyData <- readNWISdv(   siteNumber, parameterCd,   \"1980-01-01\", \"2010-01-01\" )  # Sample data Nitrate: parameterCd <- \"00618\" qwData <- readNWISqw(   siteNumber, parameterCd,   \"1980-01-01\", \"2010-01-01\" )  pCode <- readNWISpCode(parameterCd)"},{"path":"/index.html","id":"water-quality-portal","dir":"","previous_headings":"","what":"Water Quality Portal","title":"Retrieval Functions for USGS and EPA Hydrology and Water Quality Data","text":"","code":"specificCond <- readWQPqw(   siteNumbers = \"WIDNR_WQX-10032762\",   parameterCd = \"Specific conductance\",   startDate = \"2011-05-01\",   endDate = \"2011-09-30\" )"},{"path":"/index.html","id":"network-linked-data-index","dir":"","previous_headings":"","what":"Network Linked Data Index","title":"Retrieval Functions for USGS and EPA Hydrology and Water Quality Data","text":"","code":"features <- findNLDI(   nwis = \"01491000\",   nav = \"UT\",   find = c(\"basin\", \"wqp\") )"},{"path":"/index.html","id":"installation-of-dataretrieval","dir":"","previous_headings":"","what":"Installation of dataRetrieval","title":"Retrieval Functions for USGS and EPA Hydrology and Water Quality Data","text":"install dataRetrieval package, must using R 3.0 greater run following command: get cutting-edge changes, install GitHub using remotes packages:","code":"install.packages(\"dataRetrieval\") library(remotes) install_github(\"DOI-USGS/dataRetrieval\",                build_vignettes = TRUE,                 build_opts = c(\"--no-resave-data\",                               \"--no-manual\"))"},{"path":"/index.html","id":"reporting-bugs","dir":"","previous_headings":"","what":"Reporting bugs","title":"Retrieval Functions for USGS and EPA Hydrology and Water Quality Data","text":"Please consider reporting bugs asking questions Issues page: https://github.com/DOI-USGS/dataRetrieval/issues","code":""},{"path":"/index.html","id":"citing-dataretrieval","dir":"","previous_headings":"","what":"Citing dataRetrieval","title":"Retrieval Functions for USGS and EPA Hydrology and Water Quality Data","text":"","code":"citation(package = \"dataRetrieval\") #>  #> To cite dataRetrieval in publications, please use: #>  #>   De Cicco, L.A., Hirsch, R.M., Lorenz, D., Watkins, W.D., Johnson, M., #>   2022, dataRetrieval: R packages for discovering and retrieving water #>   data available from Federal hydrologic web services, v.2.7.12, #>   doi:10.5066/P9X4L3GE #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     author = {Laura A. {De Cicco} and David Lorenz and Robert M. Hirsch and William Watkins and Mike Johnson}, #>     title = {dataRetrieval: R packages for discovering and retrieving water data available from U.S. federal hydrologic web services}, #>     publisher = {U.S. Geological Survey}, #>     address = {Reston, VA}, #>     version = {2.7.12}, #>     institution = {U.S. Geological Survey}, #>     year = {2022}, #>     doi = {10.5066/P9X4L3GE}, #>     url = {https://code.usgs.gov/water/dataRetrieval}, #>   }"},{"path":"/index.html","id":"package-support","dir":"","previous_headings":"","what":"Package Support","title":"Retrieval Functions for USGS and EPA Hydrology and Water Quality Data","text":"Water Mission Area USGS supports development maintenance dataRetrieval, likely future. Resources available primarily maintenance responding user questions. Priorities development new features determined dataRetrieval development team. software last released USGS record: IP-147158.","code":""},{"path":"/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Retrieval Functions for USGS and EPA Hydrology and Water Quality Data","text":"software preliminary provisional subject revision. provided meet need timely best science. software received final approval U.S. Geological Survey (USGS). warranty, expressed implied, made USGS U.S. Government functionality software related material shall fact release constitute warranty. software provided condition neither USGS U.S. Government shall held liable damages resulting authorized unauthorized use software.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"License","title":"License","text":"Unless otherwise noted, project public domain United States contains materials originally came United States Geological Survey, agency United States Department Interior. information, see official USGS copyright policy https://www.usgs.gov/information-policies--instructions/copyrights--credits Additionally, waive copyright related rights work worldwide CC0 1.0 Universal public domain dedication.","code":""},{"path":"/LICENSE.html","id":"cc0-10-universal-summary","dir":"","previous_headings":"","what":"CC0 1.0 Universal Summary","title":"License","text":"human-readable summary Legal Code (read full text).","code":""},{"path":"/LICENSE.html","id":"no-copyright","dir":"","previous_headings":"CC0 1.0 Universal Summary","what":"No Copyright","title":"License","text":"person associated work deed dedicated work public domain waiving rights work worldwide copyright law, including related neighboring rights, extent allowed law. can copy, modify, distribute perform work, even commercial purposes, without asking permission.","code":""},{"path":"/LICENSE.html","id":"other-information","dir":"","previous_headings":"CC0 1.0 Universal Summary","what":"Other Information","title":"License","text":"way patent trademark rights person affected CC0, rights persons may work work used, publicity privacy rights. Unless expressly stated otherwise, person associated work deed makes warranties work, disclaims liability uses work, fullest extent permitted applicable law. using citing work, imply endorsement author affirmer.","code":""},{"path":"/reference/addWaterYear.html","id":null,"dir":"Reference","previous_headings":"","what":"add a water year column — addWaterYear","title":"add a water year column — addWaterYear","text":"Add column dataRetrieval data frame water year. WQP queries return water year column start end dates data.","code":""},{"path":"/reference/addWaterYear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add a water year column — addWaterYear","text":"","code":"addWaterYear(rawData)"},{"path":"/reference/addWaterYear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add a water year column — addWaterYear","text":"rawData daily- unit-values datset retrieved NWISweb. Must least one following columns add new water year columns: `dateTime`, `Date`, `ActivityStartDate`, `ActivityEndDate`. date column(s) can character, POSIXct, Date. numeric.","code":""},{"path":"/reference/addWaterYear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add a water year column — addWaterYear","text":"data.frame additional integer column \"WY\" appended date column name. WQP, 2 columns: `ActivityStartDateWY` `ActivityEndDateWY`.","code":""},{"path":"/reference/addWaterYear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add a water year column — addWaterYear","text":"","code":"# \\donttest{ nwisData <- readNWISdv(\"04085427\", \"00060\", \"2012-01-01\", \"2012-06-30\") nwisData <- addWaterYear(nwisData)  wqpData <- readWQPqw(\"USGS-01594440\", \"01075\", \"\", \"\") wqpData <- addWaterYear(wqpData) # }"},{"path":"/reference/calcWaterYear.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract WY from a date — calcWaterYear","title":"Extract WY from a date — calcWaterYear","text":"Determine correct water year based calendar date.","code":""},{"path":"/reference/calcWaterYear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract WY from a date — calcWaterYear","text":"","code":"calcWaterYear(dateVec)"},{"path":"/reference/calcWaterYear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract WY from a date — calcWaterYear","text":"dateVec vector dates character (\"YYYY-DD-MM\"), Date, POSIXct. Numeric work.","code":""},{"path":"/reference/calcWaterYear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract WY from a date — calcWaterYear","text":"numeric vector indicating water year","code":""},{"path":"/reference/calcWaterYear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract WY from a date — calcWaterYear","text":"function calculates water year based USGS definition water year starts October 1 year , ends September 30. example, water year 2015 started 2014-10-01 ended 2015-09-30.","code":""},{"path":"/reference/calcWaterYear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract WY from a date — calcWaterYear","text":"","code":"x <- seq(as.Date(\"2010-01-01\"), as.Date(\"2010-12-31\"), by = \"month\") calcWaterYear(x) #>  [1] 2010 2010 2010 2010 2010 2010 2010 2010 2010 2011 2011 2011  y <- c(\"2010-01-01\", \"1994-02\", \"1980\", \"2009-11-01\", NA) calcWaterYear(y) #> [1] 2010 1994   NA 2010   NA"},{"path":"/reference/checkWQPdates.html","id":null,"dir":"Reference","previous_headings":"","what":"Date Check for Water Quality Portal — checkWQPdates","title":"Date Check for Water Quality Portal — checkWQPdates","text":"Checks date format inputs Water Quality Portal. Used readWQPqw readWQPdata.","code":""},{"path":"/reference/checkWQPdates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date Check for Water Quality Portal — checkWQPdates","text":"","code":"checkWQPdates(values)"},{"path":"/reference/checkWQPdates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date Check for Water Quality Portal — checkWQPdates","text":"values named list arguments send Water Quality Portal","code":""},{"path":"/reference/checkWQPdates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date Check for Water Quality Portal — checkWQPdates","text":"values named list corrected arguments send Water Quality Portal","code":""},{"path":"/reference/checkWQPdates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date Check for Water Quality Portal — checkWQPdates","text":"","code":"values <- list(   startDateLo = \"01-01-2002\",   characteristicName = \"Phosphorous\",   endDate = as.Date(\"2014-01-01\") ) values <- checkWQPdates(values)"},{"path":"/reference/constructNWISURL.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct NWIS url for data retrieval — constructNWISURL","title":"Construct NWIS url for data retrieval — constructNWISURL","text":"Imports data NWIS web service. function gets data : https://nwis.waterdata.usgs.gov/nwis/qwdata list parameter codes can found : https://nwis.waterdata.usgs.gov/nwis/pmcodes/ list statistic codes can found : https://nwis.waterdata.usgs.gov/nwis/help/?read_file=stat&format=table","code":""},{"path":"/reference/constructNWISURL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct NWIS url for data retrieval — constructNWISURL","text":"","code":"constructNWISURL(   siteNumbers,   parameterCd = \"00060\",   startDate = \"\",   endDate = \"\",   service,   statCd = \"00003\",   format = \"xml\",   expanded = TRUE,   ratingType = \"base\",   statReportType = \"daily\",   statType = \"mean\" )"},{"path":"/reference/constructNWISURL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct NWIS url for data retrieval — constructNWISURL","text":"siteNumbers string vector strings USGS site number.  usually 8 digit number parameterCd string vector USGS parameter code.  usually 5 digit number. startDate character starting date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval earliest possible record. endDate character ending date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval latest possible record. service string USGS service call. Possible values \"dv\" (daily values), \"uv\" (unit/instantaneous values), \"qw\" (water quality data), \"gwlevels\" (groundwater),\"rating\" (rating curve), \"peak\", \"meas\" (discrete streamflow measurements), \"stat\" (statistics web service BETA). statCd string vector USGS statistic code used daily value service. usually 5 digits.  Daily mean (00003) default. format string, can \"tsv\" \"xml\", applicable daily unit value requests.  \"tsv\" returns results faster, possibility incomplete file returned without warning. XML slower, offer warning file incomplete (example, momentary problem internet connection). possible safely use \"tsv\" option, user must carefully check results see data returns matches expected. default therefore \"xml\". expanded logical defaults TRUE. TRUE, retrieves additional information, applicable qw data. ratingType can \"base\", \"corr\", \"exsa\". applies rating curve data. statReportType character used statistics service requests.  Time division statistics: daily, monthly, annual.  Default daily. Note daily provides statistics calendar day specified range water years, .e. 366 data points returned site/parameter.  Use readNWISdata readNWISdv daily averages. Also note \"annual\" returns statistics calendar year.  Use readNWISdata water years. Monthly yearly provide statistics month year within range individually. statType character used statistics service requests. Type(s) statistics output daily values.  Default mean, option monthly yearly report types. See statistics service documentation https://waterservices.usgs.gov/rest/Statistics-Service.html full list codes.","code":""},{"path":"/reference/constructNWISURL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct NWIS url for data retrieval — constructNWISURL","text":"url string","code":""},{"path":"/reference/constructNWISURL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct NWIS url for data retrieval — constructNWISURL","text":"","code":"site_id <- \"01594440\" startDate <- \"1985-01-01\" endDate <- \"\" pCode <- c(\"00060\", \"00010\") url_daily <- constructNWISURL(site_id, pCode,   startDate, endDate, \"dv\",   statCd = c(\"00003\", \"00001\") ) url_unit <- constructNWISURL(site_id, pCode, \"2012-06-28\", \"2012-06-30\", \"iv\")  url_qw_single <- constructNWISURL(site_id, \"01075\", startDate, endDate, \"qw\") url_qw <- constructNWISURL(   site_id, c(\"01075\", \"00029\", \"00453\"),   startDate, endDate, \"qw\" ) url_daily_tsv <- constructNWISURL(site_id, pCode, startDate, endDate, \"dv\",   statCd = c(\"00003\", \"00001\"), format = \"tsv\" ) url_rating <- constructNWISURL(site_id, service = \"rating\", ratingType = \"base\") url_peak <- constructNWISURL(site_id, service = \"peak\") url_meas <- constructNWISURL(site_id, service = \"meas\") urlQW <- constructNWISURL(\"450456092225801\", \"70300\",   startDate = \"\", endDate = \"\",   \"qw\", expanded = TRUE )"},{"path":"/reference/constructUseURL.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct URL for NWIS water use data service — constructUseURL","title":"Construct URL for NWIS water use data service — constructUseURL","text":"Reconstructs URLs retrieve data : https://waterdata.usgs.gov/nwis/wu","code":""},{"path":"/reference/constructUseURL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct URL for NWIS water use data service — constructUseURL","text":"","code":"constructUseURL(years, stateCd, countyCd, categories)"},{"path":"/reference/constructUseURL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct URL for NWIS water use data service — constructUseURL","text":"years integer Years data retrieval. Must years ending 0 5, \"\", retrieves available years. stateCd character (full name, abbreviation, id), numeric (id) countyCd numeric (County IDs countyCdLookup) character (\"\") categories character Two-letter cateogory abbreviation(s)","code":""},{"path":"/reference/constructUseURL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct URL for NWIS water use data service — constructUseURL","text":"url string","code":""},{"path":"/reference/constructUseURL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct URL for NWIS water use data service — constructUseURL","text":"","code":"url <- constructUseURL(   years = c(1990, 1995),   stateCd = \"Ohio\",   countyCd = c(1, 3),   categories = \"ALL\" )"},{"path":"/reference/constructWQPURL.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct WQP url for data retrieval — constructWQPURL","title":"Construct WQP url for data retrieval — constructWQPURL","text":"Construct WQP url data retrieval. function gets data : https://www.waterqualitydata.us","code":""},{"path":"/reference/constructWQPURL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct WQP url for data retrieval — constructWQPURL","text":"","code":"constructWQPURL(siteNumbers, parameterCd, startDate, endDate, zip = TRUE)"},{"path":"/reference/constructWQPURL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct WQP url for data retrieval — constructWQPURL","text":"siteNumbers string vector strings USGS site number.  usually 8 digit number parameterCd string vector USGS parameter code.  usually 5 digit number. startDate character starting date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval earliest possible record. endDate character ending date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval latest possible record. zip logical request data via downloading zip file. Default set TRUE.","code":""},{"path":"/reference/constructWQPURL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct WQP url for data retrieval — constructWQPURL","text":"url string","code":""},{"path":"/reference/constructWQPURL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct WQP url for data retrieval — constructWQPURL","text":"","code":"site_id <- \"01594440\" startDate <- \"1985-01-01\" endDate <- \"\" pCode <- c(\"00060\", \"00010\") url_wqp <- constructWQPURL(   paste(\"USGS\", site_id, sep = \"-\"),   c(\"01075\", \"00029\", \"00453\"),   startDate, endDate ) url_wqp #> [1] \"https://www.waterqualitydata.us/data/Result/search?siteid=USGS-01594440&pCode=01075;00029;00453&startDateLo=01-01-1985&mimeType=tsv&zip=yes\" charNames <- c(   \"Temperature\",   \"Temperature, sample\",   \"Temperature, water\",   \"Temperature, water, deg F\" ) obs_url_orig <- constructWQPURL(   siteNumbers = c(     \"IIDFG-41WSSPAHS\",     \"USGS-02352560\"   ),   parameterCd = charNames,   startDate, \"\" ) obs_url_orig #> [1] \"https://www.waterqualitydata.us/data/Result/search?siteid=IIDFG-41WSSPAHS;USGS-02352560&characteristicName=Temperature;Temperature%2C%20sample;Temperature%2C%20water;Temperature%2C%20water%2C%20deg%20F&startDateLo=01-01-1985&mimeType=tsv&zip=yes\""},{"path":"/reference/convertLists.html","id":null,"dir":"Reference","previous_headings":"","what":"convert variables in dots to usable format — convertLists","title":"convert variables in dots to usable format — convertLists","text":"convert variables dots usable format","code":""},{"path":"/reference/convertLists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert variables in dots to usable format — convertLists","text":"","code":"convertLists(...)"},{"path":"/reference/countyCd.html","id":null,"dir":"Reference","previous_headings":"","what":"US County Code Lookup Table — countyCd","title":"US County Code Lookup Table — countyCd","text":"Data originally pulled https://www2.census.gov/geo/docs/reference/codes/files/national_county.txt April 1, 2015. Feb. 11, 2022, fields updated file found inst/extdata, used internally NWIS retrievals.","code":""},{"path":"/reference/countyCd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"US County Code Lookup Table — countyCd","text":"countyCd data frame.","code":""},{"path":"/reference/countyCd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"US County Code Lookup Table — countyCd","text":"","code":"head(countyCd) #>   STATE COUNTY    COUNTY_NAME STUSAB COUNTY_ID #> 1    00    000    Unspecified   <NA>      <NA> #> 2    01    001 Autauga County     AL        H1 #> 3    01    003 Baldwin County     AL        H1 #> 4    01    005 Barbour County     AL        H1 #> 5    01    007    Bibb County     AL        H1 #> 6    01    009  Blount County     AL        H1"},{"path":"/reference/countyCdLookup.html","id":null,"dir":"Reference","previous_headings":"","what":"County code look up — countyCdLookup","title":"County code look up — countyCdLookup","text":"Function simplify finding county county code definitions. Used readNWISdata readNWISuse.","code":""},{"path":"/reference/countyCdLookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"County code look up — countyCdLookup","text":"","code":"countyCdLookup(state, county, outputType = \"id\")"},{"path":"/reference/countyCdLookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"County code look up — countyCdLookup","text":"state character (full name, abbreviation, id), numeric (id) county character (name, without \"County\") numeric (id) outputType character can \"fullName\", \"tableIndex\", \"id\", \"fullEntry\".","code":""},{"path":"/reference/countyCdLookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"County code look up — countyCdLookup","text":"","code":"id <- countyCdLookup(state = \"WI\", county = \"Dane\") name <- countyCdLookup(state = \"OH\", county = 13, output = \"fullName\") index <- countyCdLookup(state = \"Pennsylvania\", county = \"ALLEGHENY COUNTY\", output = \"tableIndex\") fromIDs <- countyCdLookup(state = 13, county = 5, output = \"fullName\") already_correct <- countyCdLookup(county = \"51001\")"},{"path":[]},{"path":"/reference/dataRetrieval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieval functions for USGS and EPA data — dataRetrieval","text":"Retrieval functions USGS EPA hydrologic water quality data. Please see https://pubs.er.usgs.gov/publication/tm4A10 information.","code":""},{"path":"/reference/dataRetrieval.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieval functions for USGS and EPA data — dataRetrieval","text":"Laura De Cicco ldecicco@usgs.gov","code":""},{"path":"/reference/default_ua.html","id":null,"dir":"Reference","previous_headings":"","what":"Create user agent — default_ua","title":"Create user agent — default_ua","text":"Create user agent","code":""},{"path":"/reference/default_ua.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create user agent — default_ua","text":"","code":"default_ua()"},{"path":"/reference/findNLDI.html","id":null,"dir":"Reference","previous_headings":"","what":"R Client for the Network Linked Data Index — findNLDI","title":"R Client for the Network Linked Data Index — findNLDI","text":"Provides formal client USGS Network Linked Data Index.","code":""},{"path":"/reference/findNLDI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R Client for the Network Linked Data Index — findNLDI","text":"","code":"findNLDI(   comid = NULL,   nwis = NULL,   wqp = NULL,   huc12 = NULL,   location = NULL,   origin = NULL,   nav = NULL,   find = c(\"flowlines\"),   distance_km = 100,   no_sf = FALSE,   warn = TRUE )"},{"path":"/reference/findNLDI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R Client for the Network Linked Data Index — findNLDI","text":"comid numeric character. NHDPlusV2 COMID nwis numeric character. USGS NWIS surface water siteID wqp numeric character. water quality point ID huc12 numeric character. WBD HUC12 unit ID location numeric vector. Coordinate pair WGS84 SRS ordered lng/lat (X,Y) origin named list. Specifying feature type ID (e.g. list(\"comid\" = 101)) nav character vector. navigate starting point. Options include along upper mainsteam (UM), upstream tributary (UT), downstream mainstem (DM) downstream divergences (DD). may select one abbreviations (\"UM\", \"UT\", DM\", \"DD\"). find character vector. Define resources find along navigation path(s) (see get_nldi_sources()$source). Can also include 'basin' 'flowline', return upstream basin starting feature flowlines along navigation respectively. default \"flowlines\". provide resource, want flowlines, flowlines must explicitly requested. distance_km numeric. Define far look along navigation path kilometers (default = 100) no_sf available, `sf` used parsing, defaults `TRUE` `sf` locally installed warn (default TRUE) warnings printed","code":""},{"path":"/reference/findNLDI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"R Client for the Network Linked Data Index — findNLDI","text":"list data.frames sf installed, list sf objects ","code":""},{"path":"/reference/findNLDI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R Client for the Network Linked Data Index — findNLDI","text":"function useful topology location based feature discovery. user must specify origin feature, optional navigation direction(s) along network, well features identify along navigated paths. Valid starting options can given one following arguments: comid, nwis, huc12, wqp, location, start.","code":""},{"path":"/reference/findNLDI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R Client for the Network Linked Data Index — findNLDI","text":"","code":"# \\donttest{ # Find Features / Define origin features  ## Find feature by COMID findNLDI(comid = 101) #> $origin #> Simple feature collection with 1 feature and 3 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -94.64845 ymin: 31.0838 xmax: -94.62997 ymax: 31.09915 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 4 #>   sourceName    identifier comid                                        geometry #>   <chr>         <chr>      <chr>                                <LINESTRING [°]> #> 1 NHDPlus comid 101        101   (-94.64845 31.09915, -94.64803 31.09871, -94.6… #>   ## Find feature by NWIS ID findNLDI(nwis = \"11120000\") #> $origin #> Simple feature collection with 1 feature and 8 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -119.8118 ymin: 34.42472 xmax: -119.8118 ymax: 34.42472 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 9 #>   sourceName               identifier    comid measure reach…¹ name      X     Y #>   <chr>                    <chr>         <chr>   <dbl> <chr>   <chr> <dbl> <dbl> #> 1 NWIS Surface Water Sites USGS-11120000 1759…    92.5 180600… ATAS… -120.  34.4 #> # … with 1 more variable: geometry <POINT [°]>, and abbreviated variable name #> #   ¹​reachcode #>   ## Find feature by WQP ID findNLDI(wqp = \"USGS-04024315\") #> $origin #> Simple feature collection with 1 feature and 6 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -92.23492 ymin: 46.50355 xmax: -92.23492 ymax: 46.50355 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 7 #>   sourceName           ident…¹ comid name      X     Y             geometry #>   <chr>                <chr>   <chr> <chr> <dbl> <dbl>          <POINT [°]> #> 1 Water Quality Portal USGS-0… 1800… LITT… -92.2  46.5 (-92.23492 46.50355) #> # … with abbreviated variable name ¹​identifier #>   ## Find feature by LOCATION findNLDI(location = c(-115, 40)) #> $origin #> Simple feature collection with 1 feature and 3 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -115.0326 ymin: 40.04013 xmax: -115.0182 ymax: 40.05183 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 4 #>   sourceName    identifier comid                                        geometry #>   <chr>         <chr>      <chr>                                <LINESTRING [°]> #> 1 NHDPlus comid 946060315  946060315 (-115.0182 40.05183, -115.0185 40.05176, -… #>   ## GENERAL ORIGIN: COMID findNLDI(origin = list(\"comid\" = 101)) #> $origin #> Simple feature collection with 1 feature and 3 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -94.64845 ymin: 31.0838 xmax: -94.62997 ymax: 31.09915 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 4 #>   sourceName    identifier comid                                        geometry #>   <chr>         <chr>      <chr>                                <LINESTRING [°]> #> 1 NHDPlus comid 101        101   (-94.64845 31.09915, -94.64803 31.09871, -94.6… #>   ## GENERAL ORIGIN: WaDE findNLDI(origin = list(\"wade\" = \"CA_45206\")) #> Error in: https://labs.waterdata.usgs.gov/api/nldi/linked-data/wade/CA_45206/ #> named list()  # Navigation (flowlines will be returned if find is unspecified) # UPPER MAINSTEM of USGS-11120000 findNLDI(nwis = \"11120000\", nav = \"UM\") #> $origin #> Simple feature collection with 1 feature and 8 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -119.8118 ymin: 34.42472 xmax: -119.8118 ymax: 34.42472 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 9 #>   sourceName               identifier    comid measure reach…¹ name      X     Y #>   <chr>                    <chr>         <chr>   <dbl> <chr>   <chr> <dbl> <dbl> #> 1 NWIS Surface Water Sites USGS-11120000 1759…    92.5 180600… ATAS… -120.  34.4 #> # … with 1 more variable: geometry <POINT [°]>, and abbreviated variable name #> #   ¹​reachcode #>  #> $UM_flowlines #> Simple feature collection with 4 features and 1 field #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -119.8296 ymin: 34.42015 xmax: -119.7607 ymax: 34.46831 #> Geodetic CRS:  WGS 84 #> # A tibble: 4 × 2 #>   nhdplus_comid                                                         geometry #>   <chr>                                                         <LINESTRING [°]> #> 1 17595429      (-119.8104 34.42513, -119.8112 34.42476, -119.8123 34.42447, -1… #> 2 17595395      (-119.7859 34.43139, -119.7861 34.43114, -119.7868 34.43091, -1… #> 3 17595361      (-119.7755 34.43447, -119.7761 34.43406, -119.7782 34.43337, -1… #> 4 17596117      (-119.7631 34.46831, -119.7626 34.46781, -119.7623 34.46721, -1… #>   # MULTI-REQUEST # UPPER MAINSTEM and TRIBUTARY of USGS-11120000 findNLDI(nwis = \"11120000\", nav = c(\"UT\", \"UM\")) #> $origin #> Simple feature collection with 1 feature and 8 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -119.8118 ymin: 34.42472 xmax: -119.8118 ymax: 34.42472 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 9 #>   sourceName               identifier    comid measure reach…¹ name      X     Y #>   <chr>                    <chr>         <chr>   <dbl> <chr>   <chr> <dbl> <dbl> #> 1 NWIS Surface Water Sites USGS-11120000 1759…    92.5 180600… ATAS… -120.  34.4 #> # … with 1 more variable: geometry <POINT [°]>, and abbreviated variable name #> #   ¹​reachcode #>  #> $UT_flowlines #> Simple feature collection with 25 features and 1 field #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -119.8296 ymin: 34.42015 xmax: -119.7332 ymax: 34.51769 #> Geodetic CRS:  WGS 84 #> # A tibble: 25 × 2 #>    nhdplus_comid                                                        geometry #>    <chr>                                                        <LINESTRING [°]> #>  1 17595429      (-119.8104 34.42513, -119.8112 34.42476, -119.8123 34.42447, -… #>  2 17595393      (-119.8052 34.44199, -119.8051 34.44135, -119.8052 34.44069, -… #>  3 17595395      (-119.7859 34.43139, -119.7861 34.43114, -119.7868 34.43091, -… #>  4 17596113      (-119.7658 34.47264, -119.7658 34.47214, -119.766 34.4718, -11… #>  5 17596111      (-119.7944 34.45971, -119.7952 34.45938, -119.7956 34.45906, -… #>  6 17595361      (-119.7755 34.43447, -119.7761 34.43406, -119.7782 34.43337, -… #>  7 17596115      (-119.7709 34.45809, -119.7714 34.45738, -119.772 34.45692, -1… #>  8 17595239      (-119.7624 34.4798, -119.7626 34.47978, -119.7631 34.4796, -11… #>  9 17596077      (-119.7435 34.5, -119.7439 34.49933, -119.7447 34.49844, -119.… #> 10 17595277      (-119.7914 34.47602, -119.7915 34.47557, -119.7914 34.47421, -… #> # … with 15 more rows #>  #> $UM_flowlines #> Simple feature collection with 4 features and 1 field #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -119.8296 ymin: 34.42015 xmax: -119.7607 ymax: 34.46831 #> Geodetic CRS:  WGS 84 #> # A tibble: 4 × 2 #>   nhdplus_comid                                                         geometry #>   <chr>                                                         <LINESTRING [°]> #> 1 17595429      (-119.8104 34.42513, -119.8112 34.42476, -119.8123 34.42447, -1… #> 2 17595395      (-119.7859 34.43139, -119.7861 34.43114, -119.7868 34.43091, -1… #> 3 17595361      (-119.7755 34.43447, -119.7761 34.43406, -119.7782 34.43337, -1… #> 4 17596117      (-119.7631 34.46831, -119.7626 34.46781, -119.7623 34.46721, -1… #>   # Discover Features(flowlines will not be returned unless included in find)  ## Find feature(s) on the upper tributary of USGS-11120000 findNLDI(nwis = \"11120000\", nav = \"UT\", find = c(\"nwis\", \"wqp\")) #> Warning: No data returned for: https://labs.waterdata.usgs.gov/api/nldi/linked-data/nwissite/USGS-11120000/navigation/UT/WQP?f=json&distance=100 #> $origin #> Simple feature collection with 1 feature and 8 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -119.8118 ymin: 34.42472 xmax: -119.8118 ymax: 34.42472 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 9 #>   sourceName               identifier    comid measure reach…¹ name      X     Y #>   <chr>                    <chr>         <chr>   <dbl> <chr>   <chr> <dbl> <dbl> #> 1 NWIS Surface Water Sites USGS-11120000 1759…    92.5 180600… ATAS… -120.  34.4 #> # … with 1 more variable: geometry <POINT [°]>, and abbreviated variable name #> #   ¹​reachcode #>  #> $UT_nwissite #> Simple feature collection with 3 features and 8 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -119.8118 ymin: 34.42472 xmax: -119.7843 ymax: 34.445 #> Geodetic CRS:  WGS 84 #> # A tibble: 3 × 9 #>   sourceName               identifier    comid measure reach…¹ name      X     Y #>   <chr>                    <chr>         <chr>   <dbl> <chr>   <chr> <dbl> <dbl> #> 1 NWIS Surface Water Sites USGS-11120000 1759…    92.5 180600… ATAS… -120.  34.4 #> 2 NWIS Surface Water Sites USGS-11119900 1759…    15.5 180600… ATAS… -120.  34.4 #> 3 NWIS Surface Water Sites USGS-11119940 1759…    14.3 180600… MARI… -120.  34.4 #> # … with 1 more variable: geometry <POINT [°]>, and abbreviated variable name #> #   ¹​reachcode #>   ## Find upstream basin boundary and  of USGS-11120000 findNLDI(nwis = \"11120000\", find = \"basin\") #> $origin #> Simple feature collection with 1 feature and 8 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -119.8118 ymin: 34.42472 xmax: -119.8118 ymax: 34.42472 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 9 #>   sourceName               identifier    comid measure reach…¹ name      X     Y #>   <chr>                    <chr>         <chr>   <dbl> <chr>   <chr> <dbl> <dbl> #> 1 NWIS Surface Water Sites USGS-11120000 1759…    92.5 180600… ATAS… -120.  34.4 #> # … with 1 more variable: geometry <POINT [°]>, and abbreviated variable name #> #   ¹​reachcode #>  #> $basin #> Simple feature collection with 1 feature and 0 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -119.8295 ymin: 34.41806 xmax: -119.7307 ymax: 34.52034 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 1 #>                                                                         geometry #>                                                                    <POLYGON [°]> #> 1 ((-119.7479 34.45901, -119.7452 34.45292, -119.745 34.44701, -119.7473 34.443… #>   # Control Distance ## Limit search to 50 km findNLDI(comid = 101, nav = \"DM\", find = c(\"nwis\", \"wqp\", \"flowlines\"), distance_km = 50) #> $origin #> Simple feature collection with 1 feature and 3 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -94.64845 ymin: 31.0838 xmax: -94.62997 ymax: 31.09915 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 4 #>   sourceName    identifier comid                                        geometry #>   <chr>         <chr>      <chr>                                <LINESTRING [°]> #> 1 NHDPlus comid 101        101   (-94.64845 31.09915, -94.64803 31.09871, -94.6… #>  #> $DM_nwissite #> Simple feature collection with 1 feature and 8 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -94.39944 ymin: 31.025 xmax: -94.39944 ymax: 31.025 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 9 #>   sourceName               identifier    comid name  reach…¹ measure     X     Y #>   <chr>                    <chr>         <chr> <chr> <chr>   <chr>   <dbl> <dbl> #> 1 NWIS Surface Water Sites USGS-08033500 1109… Nech… 120200… 68.708… -94.4  31.0 #> # … with 1 more variable: geometry <POINT [°]>, and abbreviated variable name #> #   ¹​reachcode #>  #> $DM_WQP #> Simple feature collection with 3 features and 6 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -94.3995 ymin: 31.0247 xmax: -94.38492 ymax: 31.03547 #> Geodetic CRS:  WGS 84 #> # A tibble: 3 × 7 #>   sourceName           ident…¹ comid name      X     Y             geometry #>   <chr>                <chr>   <chr> <chr> <dbl> <dbl>          <POINT [°]> #> 1 Water Quality Portal USGS-0… 1109… Nech… -94.4  31.0   (-94.39944 31.025) #> 2 Water Quality Portal TCEQMA… 1109… NECH… -94.4  31.0   (-94.3995 31.0247) #> 3 Water Quality Portal USGS-3… 1109… PR-3… -94.4  31.0 (-94.38492 31.03547) #> # … with abbreviated variable name ¹​identifier #>  #> $DM_flowlines #> Simple feature collection with 20 features and 1 field #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -94.64845 ymin: 31.00305 xmax: -94.37394 ymax: 31.09915 #> Geodetic CRS:  WGS 84 #> # A tibble: 20 × 2 #>    nhdplus_comid                                                        geometry #>    <chr>                                                        <LINESTRING [°]> #>  1 101           (-94.64845 31.09915, -94.64803 31.09871, -94.64774 31.0981, -9… #>  2 1078719       (-94.62997 31.0838, -94.62957 31.08367, -94.6288 31.08371, -94… #>  3 1078721       (-94.61139 31.07963, -94.61205 31.07897, -94.61226 31.07844, -… #>  4 1078725       (-94.61216 31.07787, -94.61085 31.07759, -94.60894 31.07762, -… #>  5 1078733       (-94.60537 31.07764, -94.60502 31.07796, -94.60481 31.07805, -… #>  6 1078739       (-94.59281 31.07283, -94.59113 31.07301, -94.58833 31.07262, -… #>  7 1078769       (-94.56965 31.06817, -94.56946 31.06814, -94.56909 31.06826, -… #>  8 1078783       (-94.53857 31.05436, -94.53809 31.05429, -94.53764 31.05388, -… #>  9 1078807       (-94.53096 31.05568, -94.53093 31.05499, -94.53045 31.05451, -… #> 10 1078835       (-94.51641 31.04992, -94.51633 31.04939, -94.5159 31.04891, -9… #> 11 1079065       (-94.50175 31.04448, -94.50175 31.04438, -94.50101 31.0431, -9… #> 12 1078885       (-94.49899 31.04272, -94.49737 31.04286, -94.49689 31.04275, -… #> 13 1078897       (-94.48568 31.03226, -94.48568 31.03155, -94.48536 31.03128, -… #> 14 1109679       (-94.45777 31.03345, -94.45771 31.033, -94.45779 31.03261, -94… #> 15 1109681       (-94.45096 31.00347, -94.45066 31.00314, -94.45048 31.00305, -… #> 16 1109675       (-94.4342 31.00714, -94.43401 31.00755, -94.43401 31.00787, -9… #> 17 1109669       (-94.43277 31.01319, -94.43402 31.01303, -94.43455 31.01278, -… #> 18 1109665       (-94.43287 31.01461, -94.43279 31.0147, -94.43138 31.01482, -9… #> 19 1109655       (-94.40199 31.02606, -94.40188 31.02606, -94.401 31.02521, -94… #> 20 1109651       (-94.39707 31.02849, -94.39696 31.02906, -94.39672 31.02917, -… #>  # }"},{"path":"/reference/getQuerySummary.html","id":null,"dir":"Reference","previous_headings":"","what":"getting header information from a WQP query — getQuerySummary","title":"getting header information from a WQP query — getQuerySummary","text":"getting header information WQP query","code":""},{"path":"/reference/getQuerySummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getting header information from a WQP query — getQuerySummary","text":"","code":"getQuerySummary(url)"},{"path":"/reference/getQuerySummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getting header information from a WQP query — getQuerySummary","text":"url query url","code":""},{"path":"/reference/getWebServiceData.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to return data from web services — getWebServiceData","title":"Function to return data from web services — getWebServiceData","text":"function accepts url parameter, returns raw data. function enhances GET informative error messages.","code":""},{"path":"/reference/getWebServiceData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to return data from web services — getWebServiceData","text":"","code":"getWebServiceData(obs_url, ...)"},{"path":"/reference/getWebServiceData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to return data from web services — getWebServiceData","text":"obs_url character containing url retrieval ... information pass header request","code":""},{"path":"/reference/getWebServiceData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to return data from web services — getWebServiceData","text":"raw data web services","code":""},{"path":"/reference/getWebServiceData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to return data from web services — getWebServiceData","text":"","code":"siteNumber <- \"02177000\" startDate <- \"2012-09-01\" endDate <- \"2012-10-01\" offering <- \"00003\" property <- \"00060\" obs_url <- constructNWISURL(siteNumber, property, startDate, endDate, \"dv\") # \\donttest{ rawData <- getWebServiceData(obs_url) # }"},{"path":"/reference/get_nldi_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Get current NLDI offerings — get_nldi_sources","title":"Get current NLDI offerings — get_nldi_sources","text":"Used query current resources available NLDI","code":""},{"path":"/reference/get_nldi_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get current NLDI offerings — get_nldi_sources","text":"","code":"get_nldi_sources(url = pkg.env$nldi_base)"},{"path":"/reference/get_nldi_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get current NLDI offerings — get_nldi_sources","text":"url URL NLDI sources. Default supplied package environment.","code":""},{"path":"/reference/get_nldi_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get current NLDI offerings — get_nldi_sources","text":"data.frame","code":""},{"path":"/reference/get_nldi_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get current NLDI offerings — get_nldi_sources","text":"","code":"# \\donttest{ get_nldi_sources() #>            source                                     sourceName #> 1        ca_gages                 Streamgage catalog for CA SB19 #> 2  geoconnex-demo              geoconnex contribution demo sites #> 3      gfv11_pois USGS Geospatial Fabric V1.1 Points of Interest #> 4         huc12pp                              HUC12 Pour Points #> 5        nmwdi-st          New Mexico Water Data Initative Sites #> 6          nwisgw                         NWIS Groundwater Sites #> 7        nwissite                       NWIS Surface Water Sites #> 8        ref_gage                   geoconnex.us reference gages #> 9           vigil                             Vigil Network Data #> 10           wade                  Water Data Exchange 2.0 Sites #> 11            WQP                           Water Quality Portal #> 12          comid                                  NHDPlus comid #>                                                               features #> 1        https://labs.waterdata.usgs.gov/api/nldi/linked-data/ca_gages #> 2  https://labs.waterdata.usgs.gov/api/nldi/linked-data/geoconnex-demo #> 3      https://labs.waterdata.usgs.gov/api/nldi/linked-data/gfv11_pois #> 4         https://labs.waterdata.usgs.gov/api/nldi/linked-data/huc12pp #> 5        https://labs.waterdata.usgs.gov/api/nldi/linked-data/nmwdi-st #> 6          https://labs.waterdata.usgs.gov/api/nldi/linked-data/nwisgw #> 7        https://labs.waterdata.usgs.gov/api/nldi/linked-data/nwissite #> 8        https://labs.waterdata.usgs.gov/api/nldi/linked-data/ref_gage #> 9           https://labs.waterdata.usgs.gov/api/nldi/linked-data/vigil #> 10           https://labs.waterdata.usgs.gov/api/nldi/linked-data/wade #> 11            https://labs.waterdata.usgs.gov/api/nldi/linked-data/wqp #> 12          https://labs.waterdata.usgs.gov/api/nldi/linked-data/comid # }"},{"path":"/reference/has_internet_2.html","id":null,"dir":"Reference","previous_headings":"","what":"has_internet2 — has_internet_2","title":"has_internet2 — has_internet_2","text":"Function check internet even user behind proxy","code":""},{"path":"/reference/has_internet_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"has_internet2 — has_internet_2","text":"","code":"has_internet_2(obs_url)"},{"path":"/reference/has_internet_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"has_internet2 — has_internet_2","text":"obs_url character obs_url check","code":""},{"path":"/reference/importNGWMN.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to return data from the National Ground Water Monitoring Network waterML2 format — importNGWMN","title":"Function to return data from the National Ground Water Monitoring Network waterML2 format — importNGWMN","text":"function accepts url parameter WaterML2 getObservation. function still development, general functionality correct.","code":""},{"path":"/reference/importNGWMN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to return data from the National Ground Water Monitoring Network waterML2 format — importNGWMN","text":"","code":"importNGWMN(input, asDateTime = FALSE, tz = \"UTC\")"},{"path":"/reference/importNGWMN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to return data from the National Ground Water Monitoring Network waterML2 format — importNGWMN","text":"input character raw, containing url retrieval path data file, raw XML. asDateTime logical, TRUE returns date time POSIXct, FALSE, character tz character set timezone attribute dateTime. Default \"UTC\", converts date times UTC, properly accounting daylight savings times based data's provided time zone offset. Possible values provide \"America/New_York\", \"America/Chicago\", \"America/Denver\", \"America/Los_Angeles\", \"America/Anchorage\", well following use daylight savings time: \"America/Honolulu\", \"America/Jamaica\", \"America/Managua\", \"America/Phoenix\", \"America/Metlakatla\". See also  OlsonNames() information time zones.","code":""},{"path":"/reference/importNGWMN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to return data from the National Ground Water Monitoring Network waterML2 format — importNGWMN","text":"mergedDF data frame source, time, value, uom, uomTitle, comment, gmlID","code":""},{"path":"/reference/importNGWMN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to return data from the National Ground Water Monitoring Network waterML2 format — importNGWMN","text":"","code":"# \\donttest{ obs_url <- paste(\"https://cida.usgs.gov/ngwmn_cache/sos?request=GetObservation\",   \"service=SOS\", \"version=2.0.0\",   \"observedProperty=urn:ogc:def:property:OGC:GroundWaterLevel\",   \"responseFormat=text/xml\",   \"featureOfInterest=VW_GWDP_GEOSERVER.USGS.403836085374401\",   sep = \"&\" )  #data_returned <- importNGWMN(obs_url) # }"},{"path":"/reference/importRDB1.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to return data from the NWIS RDB 1.0 format — importRDB1","title":"Function to return data from the NWIS RDB 1.0 format — importRDB1","text":"function accepts url parameter already contains desired NWIS site, parameter code, statistic, startdate enddate. recommended use RDB format importing multi-site data.","code":""},{"path":"/reference/importRDB1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to return data from the NWIS RDB 1.0 format — importRDB1","text":"","code":"importRDB1(obs_url, asDateTime = TRUE, convertType = TRUE, tz = \"UTC\")"},{"path":"/reference/importRDB1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to return data from the NWIS RDB 1.0 format — importRDB1","text":"obs_url character containing url retrieval file path data file. asDateTime logical, TRUE returns date time POSIXct, FALSE, Date convertType logical, defaults TRUE. TRUE, function convert data dates, datetimes, numerics based standard algorithm. false, everything returned character tz character set timezone attribute datetime. Default converts datetimes UTC (properly accounting daylight savings times based data's provided tz_cd column). Recommended US values include \"UTC\", \"America/New_York\", \"America/Chicago\", \"America/Denver\", \"America/Los_Angeles\",  \"America/Anchorage\", \"America/Honolulu\", \"America/Jamaica\", \"America/Managua\", \"America/Phoenix\", \"America/Metlakatla\". complete list, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones","code":""},{"path":"/reference/importRDB1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to return data from the NWIS RDB 1.0 format — importRDB1","text":"data frame following columns: Note code value repeated parameters requested. names form XD_P_S, X literal, D option description parameter, P parameter code, S statistic code (applicable). date/time (dt) column contained incomplete date times, new column dates time inserted. happen older data reported dates, newer data reported date/time. also several useful attributes attached data frame:","code":""},{"path":"/reference/importRDB1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to return data from the NWIS RDB 1.0 format — importRDB1","text":"","code":"site_id <- \"02177000\" startDate <- \"2012-09-01\" endDate <- \"2012-10-01\" offering <- \"00003\" property <- \"00060\"  obs_url <- constructNWISURL(site_id, property,   startDate, endDate, \"dv\",   format = \"tsv\" ) # \\donttest{ data <- importRDB1(obs_url)   urlMultiPcodes <- constructNWISURL(\"04085427\", c(\"00060\", \"00010\"),   startDate, endDate, \"dv\",   statCd = c(\"00003\", \"00001\"), \"tsv\" )  multiData <- importRDB1(urlMultiPcodes)  unitDataURL <- constructNWISURL(site_id, property,   \"2020-10-30\", \"2020-11-01\", \"uv\",   format = \"tsv\" ) # includes timezone switch  unitData <- importRDB1(unitDataURL, asDateTime = TRUE)  qwURL <- constructNWISURL(c(\"04024430\", \"04024000\"),   c(\"34247\", \"30234\", \"32104\", \"34220\"),   \"2010-11-03\", \"\", \"qw\",   format = \"rdb\" )  qwData <- importRDB1(qwURL, asDateTime = TRUE, tz = \"America/Chicago\")  iceSite <- \"04024000\" start <- \"2015-11-09\" end <- \"2015-11-24\" urlIce <- constructNWISURL(iceSite, \"00060\", start, end, \"uv\", format = \"tsv\")  ice <- importRDB1(urlIce, asDateTime = TRUE) iceNoConvert <- importRDB1(urlIce, convertType = FALSE) # } # User file: filePath <- system.file(\"extdata\", package = \"dataRetrieval\") fileName <- \"RDB1Example.txt\" fullPath <- file.path(filePath, fileName) importUserRDB <- importRDB1(fullPath)"},{"path":"/reference/importWaterML1.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to return data from the NWISWeb WaterML1.1 service — importWaterML1","title":"Function to return data from the NWISWeb WaterML1.1 service — importWaterML1","text":"function accepts url parameter already contains desired NWIS site, parameter code, statistic, startdate enddate.","code":""},{"path":"/reference/importWaterML1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to return data from the NWISWeb WaterML1.1 service — importWaterML1","text":"","code":"importWaterML1(obs_url, asDateTime = FALSE, tz = \"UTC\")"},{"path":"/reference/importWaterML1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to return data from the NWISWeb WaterML1.1 service — importWaterML1","text":"obs_url character raw, containing url retrieval file path data file, raw XML. asDateTime logical, TRUE returns date time POSIXct, FALSE, Date tz character set timezone attribute datetime. Default converts datetimes UTC (properly accounting daylight savings times based data's provided tz_cd column). Recommended US values include \"UTC\", \"America/New_York\", \"America/Chicago\", \"America/Denver\", \"America/Los_Angeles\", \"America/Anchorage\", \"America/Honolulu\", \"America/Jamaica\", \"America/Managua\", \"America/Phoenix\", \"America/Metlakatla\". complete list, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones","code":""},{"path":"/reference/importWaterML1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to return data from the NWISWeb WaterML1.1 service — importWaterML1","text":"data frame following columns: Note code value repeated parameters requested. names form X_D_P_S, X literal, D option description parameter, P parameter code, S statistic code (applicable). also several useful attributes attached data frame:","code":""},{"path":[]},{"path":"/reference/importWaterML1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to return data from the NWISWeb WaterML1.1 service — importWaterML1","text":"","code":"site_id <- \"02177000\" startDate <- \"2012-09-01\" endDate <- \"2012-10-01\" offering <- \"00003\" property <- \"00060\" obs_url <- constructNWISURL(site_id, property, startDate, endDate, \"dv\") # \\donttest{ data <- importWaterML1(obs_url, asDateTime = TRUE)  groundWaterSite <- \"431049071324301\" startGW <- \"2013-10-01\" endGW <- \"2014-06-30\" groundwaterExampleURL <- constructNWISURL(groundWaterSite, NA,   startGW, endGW,   service = \"gwlevels\" ) groundWater <- importWaterML1(groundwaterExampleURL) groundWater2 <- importWaterML1(groundwaterExampleURL, asDateTime = TRUE)  unitDataURL <- constructNWISURL(   site_id, property,   \"2013-11-03\", \"2013-11-03\", \"uv\" ) unitData <- importWaterML1(unitDataURL, TRUE)  # Two sites, two pcodes, one site has two data descriptors: siteNumber <- c(\"01480015\", \"04085427\") obs_url <- constructNWISURL(   siteNumber, c(\"00060\", \"00010\"),   startDate, endDate, \"dv\" ) data <- importWaterML1(obs_url) data$dateTime <- as.Date(data$dateTime) data <- renameNWISColumns(data) names(attributes(data)) #> [1] \"names\"         \"row.names\"     \"url\"           \"siteInfo\"      #> [5] \"variableInfo\"  \"disclaimer\"    \"statisticInfo\" \"queryTime\"     #> [9] \"class\"         attr(data, \"url\") #> [1] \"https://waterservices.usgs.gov/nwis/dv/?site=01480015,04085427&format=waterml,1.1&ParameterCd=00060,00010&StatCd=00003&startDT=2012-09-01&endDT=2012-10-01\" attr(data, \"disclaimer\") #> [1] \"Provisional data are subject to revision. Go to http://waterdata.usgs.gov/nwis/help/?provisional for more information.\"  inactiveSite <- \"05212700\" inactiveSite <- constructNWISURL(inactiveSite, \"00060\",                                   \"2014-01-01\", \"2014-01-10\", \"dv\") inactiveSite <- importWaterML1(inactiveSite)  inactiveAndAcitive <- c(\"07334200\", \"05212700\") inactiveAndAcitive <- constructNWISURL(inactiveAndAcitive,                           \"00060\", \"2014-01-01\", \"2014-01-10\", \"dv\") inactiveAndAcitive <- importWaterML1(inactiveAndAcitive)  # Timezone change with specified local timezone: tzURL <- constructNWISURL(\"04027000\", c(\"00300\", \"63680\"),                            \"2011-11-05\", \"2011-11-07\", \"uv\") tzIssue <- importWaterML1(tzURL,   asDateTime = TRUE, tz = \"America/Chicago\" )  # raw XML url <- constructNWISURL(   service = \"dv\", siteNumber = \"02319300\", parameterCd = \"00060\",   startDate = \"2014-01-01\", endDate = \"2014-01-01\" ) raw <- httr::content(httr::GET(url), as = \"raw\") rawParsed <- importWaterML1(raw) # } filePath <- system.file(\"extdata\", package = \"dataRetrieval\") fileName <- \"WaterML1Example.xml\" fullPath <- file.path(filePath, fileName) importFile <- importWaterML1(fullPath, TRUE)"},{"path":"/reference/importWaterML2.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse the WaterML2 timeseries portion of a waterML2 file — importWaterML2","title":"Parse the WaterML2 timeseries portion of a waterML2 file — importWaterML2","text":"Returns data frame columns information time series measurement; Anything defined default, returned attribute data frame.","code":""},{"path":"/reference/importWaterML2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse the WaterML2 timeseries portion of a waterML2 file — importWaterML2","text":"","code":"importWaterML2(input, asDateTime = FALSE, tz = \"UTC\")"},{"path":"/reference/importWaterML2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse the WaterML2 timeseries portion of a waterML2 file — importWaterML2","text":"input XML wml2:MeasurementTimeseries node children asDateTime logical, TRUE returns date time POSIXct, FALSE, character tz character set timezone attribute datetime. Default empty quote, converts datetimes UTC (properly accounting daylight savings times based data's provided time zone offset). Possible values \"America/New_York\", \"America/Chicago\", \"America/Denver\", \"America/Los_Angeles\", \"America/Anchorage\", \"America/Honolulu\", \"America/Jamaica\", \"America/Managua\", \"America/Phoenix\", \"America/Metlakatla\"","code":""},{"path":"/reference/importWaterML2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse the WaterML2 timeseries portion of a waterML2 file — importWaterML2","text":"","code":"# \\donttest{ baseURL <- \"https://waterservices.usgs.gov/nwis/dv/?format=waterml,2.0\" URL <- paste(baseURL, \"sites=01646500\",   \"startDT=2014-09-01\",   \"endDT=2014-09-08\",   \"statCd=00003\",   \"parameterCd=00060\",   sep = \"&\" )  timesereies <- importWaterML2(URL, asDateTime = TRUE, tz = \"UTC\") # }"},{"path":"/reference/importWQP.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic Water Quality Portal Data parser — importWQP","title":"Basic Water Quality Portal Data parser — importWQP","text":"Imports data Water Quality Portal based specified url.","code":""},{"path":"/reference/importWQP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic Water Quality Portal Data parser — importWQP","text":"","code":"importWQP(obs_url, zip = TRUE, tz = \"UTC\", csv = FALSE, convertType = TRUE)"},{"path":"/reference/importWQP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic Water Quality Portal Data parser — importWQP","text":"obs_url character URL Water Quality Portal#' @keywords data import USGS web service zip logical request data via downloading zip file. Default set TRUE. tz character set timezone attribute datetime. Default UTC (properly accounting daylight savings times based data's provided tz_cd column). Possible values include \"America/New_York\",\"America/Chicago\", \"America/Denver\",\"America/Los_Angeles\", \"America/Anchorage\",\"America/Honolulu\",\"America/Jamaica\",\"America/Managua\", \"America/Phoenix\", \"America/Metlakatla\" csv logical. data coming back csv tsv format. Default FALSE. Currently, summary service support tsv, services tsv safer choice. convertType logical, defaults TRUE. TRUE, function convert data dates, datetimes, numerics based standard algorithm. false, everything returned character.","code":""},{"path":"/reference/importWQP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic Water Quality Portal Data parser — importWQP","text":"retval dataframe raw data returned Water Quality Portal. Additionally, POSIXct dateTime column supplied start end times, converted UTC. See https://www.waterqualitydata.us/portal_userguide/ information.","code":""},{"path":[]},{"path":"/reference/importWQP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic Water Quality Portal Data parser — importWQP","text":"","code":"# These examples require an internet connection to run  ## Examples take longer than 5 seconds: # \\donttest{ rawSampleURL <- constructWQPURL(\"USGS-01594440\", \"01075\", \"\", \"\")  rawSample <- importWQP(rawSampleURL)  rawSampleURL_NoZip <- constructWQPURL(\"USGS-01594440\", \"01075\", \"\", \"\", zip = FALSE)  rawSampleURL_NoZip_char <- importWQP(rawSampleURL_NoZip, zip = FALSE, convertType = FALSE)  rawSample2 <- importWQP(rawSampleURL_NoZip, zip = FALSE)  STORETex <- constructWQPURL(\"WIDNR_WQX-10032762\", \"Specific conductance\", \"\", \"\")  STORETdata <- importWQP(STORETex)  STORETdata_char <- importWQP(STORETex, convertType = FALSE) # }"},{"path":"/reference/is_dataRetrieval_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Is this a dataRetrieval user — is_dataRetrieval_user","title":"Is this a dataRetrieval user — is_dataRetrieval_user","text":"Reveals user ","code":""},{"path":"/reference/is_dataRetrieval_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is this a dataRetrieval user — is_dataRetrieval_user","text":"","code":"is_dataRetrieval_user()"},{"path":"/reference/is_dataRetrieval_user.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is this a dataRetrieval user — is_dataRetrieval_user","text":"","code":"is_dataRetrieval_user() #> [1] TRUE"},{"path":"/reference/parameterCdFile.html","id":null,"dir":"Reference","previous_headings":"","what":"List of USGS parameter codes — parameterCdFile","title":"List of USGS parameter codes — parameterCdFile","text":"Complete list USGS parameter codes Dec. 20, 2021.","code":""},{"path":"/reference/parameterCdFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of USGS parameter codes — parameterCdFile","text":"parameterData data frame information USGS parameters.","code":""},{"path":"/reference/parameterCdFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of USGS parameter codes — parameterCdFile","text":"","code":"head(parameterCdFile[, 1:2]) #>   parameter_cd parameter_group_nm #> 1        00001        Information #> 2        00002        Information #> 3        00003        Information #> 4        00004           Physical #> 5        00005        Information #> 6        00008        Information"},{"path":"/reference/pCodeToName.html","id":null,"dir":"Reference","previous_headings":"","what":"Data to convert USGS parameter code to characteristic names — pCodeToName","title":"Data to convert USGS parameter code to characteristic names — pCodeToName","text":"Data pulled Water Quality Portal December 20, 2021. data pulled https://www.waterqualitydata.us/Codes/public_srsnames/?mimeType=csv.","code":""},{"path":"/reference/pCodeToName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data to convert USGS parameter code to characteristic names — pCodeToName","text":"pCodeToName data frame information USGS parameters relate characteristic names (useful WQP requests).","code":""},{"path":"/reference/pCodeToName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data to convert USGS parameter code to characteristic names — pCodeToName","text":"","code":"head(pCodeToName[, 1:2]) #>   parm_cd                            description #> 1       4                     Stream width, feet #> 2      10    Temperature, water, degrees Celsius #> 3      11 Temperature, water, degrees Fahrenheit #> 4      14  Wet bulb temperature, degrees Celsius #> 5      20      Temperature, air, degrees Celsius #> 6      21   Temperature, air, degrees Fahrenheit"},{"path":"/reference/pcode_to_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter code to characteristic name — pcode_to_name","title":"Parameter code to characteristic name — pcode_to_name","text":"function useful fine characteristic name, result sample fraction, unit code, parameters mapped USGS parameter codes. information useful converting workflows traditional NWIS water quality retrieval Water Quality Portal retrieval.","code":""},{"path":"/reference/pcode_to_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter code to characteristic name — pcode_to_name","text":"","code":"pcode_to_name(parameterCd = \"all\")"},{"path":"/reference/pcode_to_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter code to characteristic name — pcode_to_name","text":"parameterCd character contains code character vector  5-digit parameter codes. Default \"\" return complete list parameter codes mapped characteristic name.","code":""},{"path":"/reference/pcode_to_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter code to characteristic name — pcode_to_name","text":"data frame columns  \"parm_cd\", \"description\",             \"characteristicname\", \"measureunitcode\", \"resultsamplefraction\", \"resulttemperaturebasis\", \"resultstatisticalbasis\",  \"resulttimebasis\", \"resultweightbasis\", \"resultparticlesizebasis\", \"last_rev_dt\"","code":""},{"path":"/reference/pcode_to_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter code to characteristic name — pcode_to_name","text":"","code":"pcodes <- c(\"00070\", \"00075\", \"00430\", \"52642\") # \\donttest{  all <- pcode_to_name() some <- pcode_to_name(pcodes)  # }"},{"path":"/reference/readNGWMNdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from the National Groundwater Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNdata","title":"Import data from the National Groundwater Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNdata","text":"water level data site locations names currently available web service.","code":""},{"path":"/reference/readNGWMNdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from the National Groundwater Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNdata","text":"","code":"readNGWMNdata(service, ..., asDateTime = TRUE, tz = \"UTC\")"},{"path":"/reference/readNGWMNdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from the National Groundwater Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNdata","text":"service char Service request - \"observation\" \"featureOfInterest\" implemented. ... parameters supply, namely siteNumbers bbox asDateTime logical TRUE, convert times POSIXct format.  Currently defaults FALSE since time zone information included. tz character set timezone attribute dateTime. Default \"UTC\", converts date times UTC, properly accounting daylight savings times based data's provided time zone offset. Possible values provide \"America/New_York\", \"America/Chicago\", \"America/Denver\", \"America/Los_Angeles\", \"America/Anchorage\", well following use daylight savings time: \"America/Honolulu\", \"America/Jamaica\", \"America/Managua\", \"America/Phoenix\", \"America/Metlakatla\". See also  OlsonNames() information time zones.","code":""},{"path":"/reference/readNGWMNdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from the National Groundwater Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNdata","text":"","code":"# \\donttest{ # one site site <- \"USGS.430427089284901\" #oneSite <- readNGWMNdata(siteNumbers = site, service = \"observation\")  # multiple sites sites <- c(\"USGS.272838082142201\", \"USGS.404159100494601\", \"USGS.401216080362703\") # Very slow: # multiSiteData <- readNGWMNdata(siteNumbers = sites, service = \"observation\") # attributes(multiSiteData)  # non-USGS site # accepts colon or period between agency and ID site <- \"MBMG:702934\" # data <- readNGWMNdata(siteNumbers = site, service = \"featureOfInterest\")  # bounding box # bboxSites <- readNGWMNdata(service = \"featureOfInterest\", bbox = c(30, -102, 31, 99)) # retrieve  sites.  Set asDateTime to false since one site has an invalid date # Very slow: # bboxData <- readNGWMNdata(service = \"observation\", siteNumbers = bboxSites$site[1:3], #                           asDateTime = FALSE) # }"},{"path":"/reference/readNGWMNlevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve groundwater levels from the National Ground Water Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNlevels","title":"Retrieve groundwater levels from the National Ground Water Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNlevels","text":"Retrieve groundwater levels National Ground Water Monitoring Network https://cida.usgs.gov/ngwmn/.","code":""},{"path":"/reference/readNGWMNlevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve groundwater levels from the National Ground Water Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNlevels","text":"","code":"readNGWMNlevels(siteNumbers, asDateTime = TRUE, tz = \"UTC\")"},{"path":"/reference/readNGWMNlevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve groundwater levels from the National Ground Water Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNlevels","text":"siteNumbers character Vector feature IDs formatted agency code site number separated period semicolon, e.g. USGS.404159100494601. asDateTime logical dates times converted date/time objects, returned character?  Defaults TRUE.  Must set FALSE site contains non-standard dates. tz character set timezone attribute dateTime. Default \"UTC\", converts date times UTC, properly accounting daylight savings times based data's provided time zone offset. Possible values provide \"America/New_York\", \"America/Chicago\", \"America/Denver\", \"America/Los_Angeles\", \"America/Anchorage\", well following use daylight savings time: \"America/Honolulu\", \"America/Jamaica\", \"America/Managua\", \"America/Phoenix\", \"America/Metlakatla\". See also  OlsonNames() information time zones.","code":""},{"path":"/reference/readNGWMNlevels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve groundwater levels from the National Ground Water Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNlevels","text":"","code":"# \\donttest{ # one site site <- \"USGS.430427089284901\" # oneSite <- readNGWMNlevels(siteNumbers = site)  # multiple sites sites <- c(\"USGS:272838082142201\", \"USGS:404159100494601\", \"USGS:401216080362703\") # multiSiteData <- readNGWMNlevels(sites)  # non-USGS site site <- \"MBMG.103306\" # data <- readNGWMNlevels(siteNumbers = site, asDateTime = FALSE)  # site with no data returns empty data frame noDataSite <- \"UTGS.401544112060301\" # noDataSite <- readNGWMNlevels(siteNumbers = noDataSite) # }"},{"path":"/reference/readNGWMNsites.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve site data from the National Ground Water Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNsites","title":"Retrieve site data from the National Ground Water Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNsites","text":"Retrieve site data National Ground Water Monitoring Network https://cida.usgs.gov/ngwmn/.","code":""},{"path":"/reference/readNGWMNsites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve site data from the National Ground Water Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNsites","text":"","code":"readNGWMNsites(siteNumbers)"},{"path":"/reference/readNGWMNsites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve site data from the National Ground Water Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNsites","text":"siteNumbers character Vector feature IDs formatted agency code site number separated period semicolon, e.g. USGS.404159100494601.","code":""},{"path":"/reference/readNGWMNsites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve site data from the National Ground Water Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNsites","text":"data frame following columns: #'","code":""},{"path":"/reference/readNGWMNsites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve site data from the National Ground Water Monitoring Network https://cida.usgs.gov/ngwmn/. — readNGWMNsites","text":"","code":"# \\donttest{ # one site site <- \"USGS.430427089284901\" #oneSite <- readNGWMNsites(siteNumbers = site)  # non-USGS site site <- \"MBMG.103306\" #siteInfo <- readNGWMNsites(siteNumbers = site) # }"},{"path":"/reference/readNWISdata.html","id":null,"dir":"Reference","previous_headings":"","what":"General Data Import from NWIS — readNWISdata","title":"General Data Import from NWIS — readNWISdata","text":"Returns data NWIS web service. Arguments function based https://waterservices.usgs.gov service calls. See examples ideas constructing queries.","code":""},{"path":"/reference/readNWISdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General Data Import from NWIS — readNWISdata","text":"","code":"readNWISdata(..., asDateTime = TRUE, convertType = TRUE, tz = \"UTC\")"},{"path":"/reference/readNWISdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General Data Import from NWIS — readNWISdata","text":"... see https://waterservices.usgs.gov/rest/Site-Service.html complete list options.  list arguments can also supplied. One important argument include \"service\". Possible values \"iv\" (instantaneous), \"iv_recent\" (instantaneous values within last 120 days), \"dv\" (daily values), \"gwlevels\" (groundwater levels), \"site\" (site service), \"qw\" (water-quality), \"measurement\", \"stat\" (statistics service). Note: \"qw\" \"measurement\" calls go : https://nwis.waterdata.usgs.gov/usa/nwis data requests, use different call requests schemes. statistics service limited selection arguments (see https://waterservices.usgs.gov/rest/Statistics-Service-Test-Tool.html). asDateTime logical, TRUE returns date time POSIXct, FALSE, Date convertType logical, defaults TRUE. TRUE, function convert data dates, datetimes, numerics based standard algorithm. false, everything returned character tz character set timezone attribute dateTime. Default \"UTC\", converts date times UTC, properly accounting daylight savings times based data's provided tz_cd column. Possible values provide \"America/New_York\", \"America/Chicago\", \"America/Denver\", \"America/Los_Angeles\", \"America/Anchorage\", well following use daylight savings time: \"America/Honolulu\", \"America/Jamaica\", \"America/Managua\", \"America/Phoenix\", \"America/Metlakatla\". See also  OlsonNames() information time zones.","code":""},{"path":"/reference/readNWISdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General Data Import from NWIS — readNWISdata","text":"data frame following columns: Note code value repeated parameters requested. names form X_D_P_S, X literal, D option description parameter, P parameter code, S statistic code (applicable). also several useful attributes attached data frame:","code":""},{"path":[]},{"path":"/reference/readNWISdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General Data Import from NWIS — readNWISdata","text":"","code":"# \\donttest{ # Examples not run for time considerations  dataTemp <- readNWISdata(stateCd = \"OH\", parameterCd = \"00010\", service = \"dv\") instFlow <- readNWISdata(   sites = \"05114000\", service = \"iv\",   parameterCd = \"00060\",   startDate = \"2014-05-01T00:00Z\", endDate = \"2014-05-01T12:00Z\" )  instFlowCDT <- readNWISdata(   sites = \"05114000\", service = \"iv\",   parameterCd = \"00060\",   startDate = \"2014-05-01T00:00\", endDate = \"2014-05-01T12:00\",   tz = \"America/Chicago\" )  # Empty: multiSite <- readNWISdata(   sites = c(\"04025000\", \"04072150\"), service = \"iv\",   parameterCd = \"00010\" ) # Not empty: multiSite <- readNWISdata(   sites = c(\"04025500\", \"040263491\"),   service = \"iv\", parameterCd = \"00060\" ) bBoxEx <- readNWISdata(bBox = c(-83, 36.5, -81, 38.5), parameterCd = \"00010\")  startDate <- as.Date(\"2013-10-01\") endDate <- as.Date(\"2014-09-30\") waterYear <- readNWISdata(   bBox = c(-83, 36.5, -82.5, 36.75),   parameterCd = \"00010\",   service = \"dv\",   startDate = startDate,   endDate = endDate )  siteInfo <- readNWISdata(   stateCd = \"WI\", parameterCd = \"00010\",   hasDataTypeCd = \"iv\", service = \"site\" ) temp <- readNWISdata(   bBox = c(-83, 36.5, -82.5, 36.75), parameterCd = \"00010\", service = \"site\",   seriesCatalogOutput = TRUE ) wiGWL <- readNWISdata(stateCd = \"WI\", service = \"gwlevels\") meas <- readNWISdata(   state_cd = \"WI\", service = \"measurements\",   format = \"rdb_expanded\" )  waterYearStat <- readNWISdata(   site = c(\"01646500\"),   service = \"stat\",   statReportType = \"annual\",   statYearType = \"water\",   missingData = \"on\" ) #> Please be aware the NWIS data service feeding this function is in BETA. #>  #>             Data formatting could be changed at any time, and is not guaranteed monthlyStat <- readNWISdata(   site = c(\"01646500\"),   service = \"stat\",   statReportType = \"monthly\" ) #> Please be aware the NWIS data service feeding this function is in BETA. #>  #>             Data formatting could be changed at any time, and is not guaranteed  dailyStat <- readNWISdata(   site = c(\"01646500\"),   service = \"stat\",   statReportType = \"daily\",   statType = c(\"p25\", \"p50\", \"p75\", \"min\", \"max\"),   parameterCd = \"00060\" ) #> Please be aware the NWIS data service feeding this function is in BETA. #>  #>             Data formatting could be changed at any time, and is not guaranteed  arg.list <- list(   site = \"03111548\",   statReportType = \"daily\",   statType = c(\"p25\", \"p50\", \"p75\", \"min\", \"max\"),   parameterCd = \"00060\" ) allDailyStats_2 <- readNWISdata(arg.list, service = \"stat\") #> Please be aware the NWIS data service feeding this function is in BETA. #>  #>             Data formatting could be changed at any time, and is not guaranteed  # use county names to get data dailyStaffordVA <- readNWISdata(   stateCd = \"Virginia\",   countyCd = \"Stafford\",   parameterCd = \"00060\",   startDate = \"2015-01-01\",   endDate = \"2015-01-30\" ) va_counties <- c(\"51001\", \"51003\", \"51005\", \"51007\", \"51009\", \"51011\", \"51013\", \"51015\") va_counties_data <- readNWISdata(   startDate = \"2015-01-01\", endDate = \"2015-12-31\",   parameterCd = \"00060\", countycode = va_counties )  site_id <- \"01594440\" rating_curve <- readNWISdata(service = \"rating\", site_no = site_id, file_type = \"base\") all_sites_base <- readNWISdata(service = \"rating\", file_type = \"base\") all_sites_core <- readNWISdata(service = \"rating\", file_type = \"corr\") all_sites_exsa <- readNWISdata(service = \"rating\", file_type = \"exsa\") all_sites_24hrs <- readNWISdata(service = \"rating\", file_type = \"exsa\", period = 24)  peak_data <- readNWISdata(   service = \"peak\",   site_no = c(\"01594440\", \"040851325\"),   range_selection = \"data_range\" )  peak_data <- readNWISdata(   service = \"peak\",   state_cd = \"PA\" )  peak_data <- readNWISdata(   service = \"peak\",   huc2_cd = \"20\" ) # }"},{"path":"/reference/readNWISdots.html","id":null,"dir":"Reference","previous_headings":"","what":"Format and organize NWIS arguments that are passed in as .... — readNWISdots","title":"Format and organize NWIS arguments that are passed in as .... — readNWISdots","text":"Format organize NWIS arguments passed ....","code":""},{"path":"/reference/readNWISdots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format and organize NWIS arguments that are passed in as .... — readNWISdots","text":"","code":"readNWISdots(...)"},{"path":"/reference/readNWISdv.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily Value USGS NWIS Data Retrieval — readNWISdv","title":"Daily Value USGS NWIS Data Retrieval — readNWISdv","text":"Imports data NWIS web service. function gets data : https://waterservices.usgs.gov/","code":""},{"path":"/reference/readNWISdv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily Value USGS NWIS Data Retrieval — readNWISdv","text":"","code":"readNWISdv(   siteNumbers,   parameterCd,   startDate = \"\",   endDate = \"\",   statCd = \"00003\" )"},{"path":"/reference/readNWISdv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Daily Value USGS NWIS Data Retrieval — readNWISdv","text":"siteNumbers character USGS site number.  usually 8 digit number. Multiple sites can requested character vector. parameterCd character USGS parameter code(s).  usually 5 digit number. startDate character starting date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval earliest possible record. Date arguments always specified local time. endDate character ending date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval latest possible record. Date arguments always specified local time. statCd character USGS statistic code. usually 5 digits.  Daily mean (00003) default.","code":""},{"path":"/reference/readNWISdv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Daily Value USGS NWIS Data Retrieval — readNWISdv","text":"data frame following columns: Note code value repeated parameters requested. names form X_D_P_S, X literal, D option description parameter, P parameter code, S statistic code (applicable). also several useful attributes attached data frame:","code":""},{"path":[]},{"path":"/reference/readNWISdv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Daily Value USGS NWIS Data Retrieval — readNWISdv","text":"","code":"site_id <- \"04085427\" startDate <- \"2012-01-01\" endDate <- \"2012-06-30\" pCode <- \"00060\" # \\donttest{ rawDailyQ <- readNWISdv(site_id, pCode, startDate, endDate) rawDailyQAndTempMeanMax <- readNWISdv(site_id, c(\"00010\", \"00060\"),   startDate, endDate,   statCd = c(\"00001\", \"00003\") ) rawDailyQAndTempMeanMax <- renameNWISColumns(rawDailyQAndTempMeanMax) rawDailyMultiSites <- readNWISdv(c(\"01491000\", \"01645000\"), c(\"00010\", \"00060\"),   startDate, endDate,   statCd = c(\"00001\", \"00003\") ) # Site with no data: x <- readNWISdv(\"10258500\", \"00060\", \"2014-09-08\", \"2014-09-14\") names(attributes(x)) #> [1] \"names\"         \"row.names\"     \"url\"           \"siteInfo\"      #> [5] \"variableInfo\"  \"disclaimer\"    \"statisticInfo\" \"queryTime\"     #> [9] \"class\"         attr(x, \"siteInfo\") #>                      station_nm  site_no agency_cd timeZoneOffset #> 1 PALM CYN C NR PALM SPRINGS CA 10258500      USGS         -08:00 #>   timeZoneAbbreviation dec_lat_va dec_lon_va       srs siteTypeCd    hucCd #> 1                  PST   33.74502  -116.5356 EPSG:4326         ST 18100201 #>   stateCd countyCd network #> 1      06    06065    NWIS attr(x, \"variableInfo\") #>   variableCode           variableName              variableDescription #> 1        00060 Streamflow, ft&#179;/s Discharge, cubic feet per second #>       valueType param_unit options noDataValue #> 1 Derived Value      ft3/s    Mean          NA  site <- \"05212700\" notActive <- readNWISdv(site, \"00060\", \"2014-01-01\", \"2014-01-07\") # }"},{"path":"/reference/readNWISgwl.html","id":null,"dir":"Reference","previous_headings":"","what":"Groundwater level measurements retrieval from USGS (NWIS) — readNWISgwl","title":"Groundwater level measurements retrieval from USGS (NWIS) — readNWISgwl","text":"Reads groundwater level measurements NWISweb. Mixed date/times come back service depending year data collected. See https://waterdata.usgs.gov/usa/nwis/gw details groundwater. default returned dates converted date objects, unless convertType specified FALSE. Sites non-standard date formats (.e. lacking day) can affected (see examples). See https://waterservices.usgs.gov/rest/GW-Levels-Service.html information.","code":""},{"path":"/reference/readNWISgwl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Groundwater level measurements retrieval from USGS (NWIS) — readNWISgwl","text":"","code":"readNWISgwl(   siteNumbers,   startDate = \"\",   endDate = \"\",   parameterCd = NA,   convertType = TRUE,   tz = \"UTC\" )"},{"path":"/reference/readNWISgwl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Groundwater level measurements retrieval from USGS (NWIS) — readNWISgwl","text":"siteNumbers character USGS site number (multiple sites).  usually 8 digit number startDate character starting date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval earliest possible record. endDate character ending date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval latest possible record. parameterCd character USGS parameter code.  usually 5 digit number. Default \"\". convertType logical, defaults TRUE. TRUE, function convert data dates, datetimes, numerics based standard algorithm. false, everything returned character tz character set timezone attribute dateTime. Default \"UTC\", converts date times UTC, properly accounting daylight savings times based data's provided tz_cd column. Possible values provide \"America/New_York\", \"America/Chicago\", \"America/Denver\", \"America/Los_Angeles\", \"America/Anchorage\", well following use daylight savings time: \"America/Honolulu\", \"America/Jamaica\", \"America/Managua\", \"America/Phoenix\", \"America/Metlakatla\". See also  OlsonNames() information time zones.","code":""},{"path":"/reference/readNWISgwl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Groundwater level measurements retrieval from USGS (NWIS) — readNWISgwl","text":"data frame following columns: also several useful attributes attached data frame:","code":""},{"path":[]},{"path":"/reference/readNWISgwl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Groundwater level measurements retrieval from USGS (NWIS) — readNWISgwl","text":"","code":"site_id <- \"434400121275801\" # \\donttest{ data <- readNWISgwl(site_id) sites <- c(\"434400121275801\", \"375907091432201\") data2 <- readNWISgwl(site_id, \"\", \"\") data3 <- readNWISgwl(\"420125073193001\", \"\", \"\") # handling of data where date has no day data4 <- readNWISgwl(\"425957088141001\", startDate = \"1980-01-01\") #> Not all dates were converted to Date object. Returning raw text for date columns.  data5 <- readNWISgwl(\"263819081585801\", parameterCd = \"72019\") # }"},{"path":"/reference/readNWISmeas.html","id":null,"dir":"Reference","previous_headings":"","what":"Surface-water measurement data retrieval from USGS (NWIS) — readNWISmeas","title":"Surface-water measurement data retrieval from USGS (NWIS) — readNWISmeas","text":"Reads surface-water measurement data NWISweb. Data retrieved https://waterdata.usgs.gov/nwis. See https://waterdata.usgs.gov/usa/nwis/sw details surface water.","code":""},{"path":"/reference/readNWISmeas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Surface-water measurement data retrieval from USGS (NWIS) — readNWISmeas","text":"","code":"readNWISmeas(   siteNumbers,   startDate = \"\",   endDate = \"\",   tz = \"UTC\",   expanded = FALSE,   convertType = TRUE )"},{"path":"/reference/readNWISmeas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Surface-water measurement data retrieval from USGS (NWIS) — readNWISmeas","text":"siteNumbers character USGS site number (multiple sites).  usually 8 digit number startDate character starting date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval earliest possible record. endDate character ending date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval latest possible record. tz character set timezone attribute dateTime. Default \"UTC\", converts date times UTC, properly accounting daylight savings times based data's provided tz_cd column. Possible values provide \"America/New_York\", \"America/Chicago\", \"America/Denver\", \"America/Los_Angeles\", \"America/Anchorage\", well following use daylight savings time: \"America/Honolulu\", \"America/Jamaica\", \"America/Managua\", \"America/Phoenix\", \"America/Metlakatla\". See also  OlsonNames() information time zones. expanded logical. Whether (TRUE FALSE) call expanded data. convertType logical, defaults TRUE. TRUE, function convert data dates, datetimes, numerics based standard algorithm. false, everything returned character","code":""},{"path":"/reference/readNWISmeas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Surface-water measurement data retrieval from USGS (NWIS) — readNWISmeas","text":"data frame least following columns: See https://waterdata.usgs.gov/usa/nwis/sw details surface water, https://waterdata.usgs.gov/nwis/help?output_formats_help help columns codes. also several useful attributes attached data frame:","code":""},{"path":[]},{"path":"/reference/readNWISmeas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Surface-water measurement data retrieval from USGS (NWIS) — readNWISmeas","text":"","code":"site_ids <- c(\"01594440\", \"040851325\") # \\donttest{ data <- readNWISmeas(site_ids) Meas05316840 <- readNWISmeas(\"05316840\") Meas05316840.ex <- readNWISmeas(\"05316840\", expanded = TRUE) Meas07227500.ex <- readNWISmeas(\"07227500\", expanded = TRUE) Meas07227500.exRaw <- readNWISmeas(\"07227500\", expanded = TRUE, convertType = FALSE) # }"},{"path":"/reference/readNWISpCode.html","id":null,"dir":"Reference","previous_headings":"","what":"USGS Parameter Data Retrieval — readNWISpCode","title":"USGS Parameter Data Retrieval — readNWISpCode","text":"Imports data NWIS meaured parameter based user-supplied parameter code codes. function gets data : https://nwis.waterdata.usgs.gov/nwis/pmcodes","code":""},{"path":"/reference/readNWISpCode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"USGS Parameter Data Retrieval — readNWISpCode","text":"","code":"readNWISpCode(parameterCd)"},{"path":"/reference/readNWISpCode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"USGS Parameter Data Retrieval — readNWISpCode","text":"parameterCd character USGS parameter codes (multiple parameter codes).  5 digit number codes, information can found : https://help.waterdata.usgs.gov/. get complete list current parameter codes USGS, use \"\" input.","code":""},{"path":"/reference/readNWISpCode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"USGS Parameter Data Retrieval — readNWISpCode","text":"parameterData data frame following information:","code":""},{"path":[]},{"path":"/reference/readNWISpCode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"USGS Parameter Data Retrieval — readNWISpCode","text":"","code":"paramINFO <- readNWISpCode(c(\"01075\", \"00060\", \"00931\")) paramINFO <- readNWISpCode(c(\"01075\", \"00060\", \"00931\", NA)) # \\donttest{ all_codes <- readNWISpCode(\"all\")  one_extra <- readNWISpCode(c(\"01075\", \"12345\")) #> Warning: The following pCodes seem mistyped, and no information was returned: 12345  # }"},{"path":"/reference/readNWISpeak.html","id":null,"dir":"Reference","previous_headings":"","what":"Peak flow data from USGS (NWIS) — readNWISpeak","title":"Peak flow data from USGS (NWIS) — readNWISpeak","text":"Reads peak flow NWISweb. Data retrieved https://waterdata.usgs.gov/nwis. cases, specific date peak data know. function default converting complete dates \"Date\" object, converting incomplete dates \"NA\". incomplete dates needed, set `asDateTime` argument FALSE. dates converted R Date objects.","code":""},{"path":"/reference/readNWISpeak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Peak flow data from USGS (NWIS) — readNWISpeak","text":"","code":"readNWISpeak(   siteNumbers,   startDate = \"\",   endDate = \"\",   asDateTime = TRUE,   convertType = TRUE )"},{"path":"/reference/readNWISpeak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Peak flow data from USGS (NWIS) — readNWISpeak","text":"siteNumbers character USGS site number(multiple sites).  usually 8 digit number. startDate character starting date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval earliest possible record. endDate character ending date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval latest possible record. asDateTime logical default TRUE. TRUE, peak_dt column converted Date object, incomplete dates removed. FALSE, columns removed, dates converted. convertType logical, defaults TRUE. TRUE, function convert data dates, datetimes, numerics based standard algorithm. false, everything returned character","code":""},{"path":"/reference/readNWISpeak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Peak flow data from USGS (NWIS) — readNWISpeak","text":"data frame following columns: also several useful attributes attached data frame:","code":""},{"path":[]},{"path":"/reference/readNWISpeak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Peak flow data from USGS (NWIS) — readNWISpeak","text":"","code":"site_ids <- c(\"01594440\", \"040851325\") # \\donttest{ data <- readNWISpeak(site_ids) data2 <- readNWISpeak(site_ids, asDateTime = FALSE) stations <- c(\"06011000\") peakdata <- readNWISpeak(stations, convertType = FALSE) # }"},{"path":"/reference/readNWISqw.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw Data Import for USGS NWIS QW Data — readNWISqw","title":"Raw Data Import for USGS NWIS QW Data — readNWISqw","text":"Imports data NWIS web service. function gets data : https://nwis.waterdata.usgs.gov/nwis/qwdata list parameter codes can found : https://nwis.waterdata.usgs.gov/nwis/pmcodes/ list statistic codes can found : https://nwis.waterdata.usgs.gov/nwis/help/?read_file=stat&format=table","code":""},{"path":"/reference/readNWISqw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw Data Import for USGS NWIS QW Data — readNWISqw","text":"","code":"readNWISqw(   siteNumbers,   parameterCd,   startDate = \"\",   endDate = \"\",   expanded = TRUE,   reshape = FALSE,   tz = \"UTC\" )"},{"path":"/reference/readNWISqw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raw Data Import for USGS NWIS QW Data — readNWISqw","text":"siteNumbers character USGS site numbers.  usually 8 digit number parameterCd character contains code parameter group, character vector 5-digit parameter codes. See Details. startDate character starting date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval earliest possible record. Date arguments always specified local time. endDate character ending date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval latest possible record. Date arguments always specified local time. expanded logical defaults TRUE. TRUE, retrieves additional information. Expanded data includes remark_cd (remark code), result_va (result value), val_qual_tx (result value qualifier code), meth_cd (method code), dqi_cd (data-quality indicator code), rpt_lev_va (reporting level), rpt_lev_cd (reporting level type). FALSE, returns remark_cd (remark code) result_va (result value). Expanded = FALSE give sufficient information unbiased statistical analysis. reshape logical, reshape expanded data. TRUE, return wide data frame water-quality single row sample. FALSE (default), return long data frame water-quality result single row. argument applicable expanded data. Data requested using expanded=FALSE always returned wide format. tz character set timezone attribute dateTime. Default \"UTC\", converts date times UTC, properly accounting daylight savings times based data's provided tz_cd column. Possible values provide \"America/New_York\", \"America/Chicago\", \"America/Denver\", \"America/Los_Angeles\", \"America/Anchorage\", well following use daylight savings time: \"America/Honolulu\", \"America/Jamaica\", \"America/Managua\", \"America/Phoenix\", \"America/Metlakatla\". See also  OlsonNames() information time zones.","code":""},{"path":"/reference/readNWISqw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raw Data Import for USGS NWIS QW Data — readNWISqw","text":"data frame least following columns: columns included depending requested output format (expanded = TRUE FALSE). Columns end \"_reported\" originally reported timezones, \"tz_cd\" column defines timezone POSIXct columns. also several useful attributes attached data frame:","code":""},{"path":"/reference/readNWISqw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raw Data Import for USGS NWIS QW Data — readNWISqw","text":"Valid parameter code groups \"\" group codes: one parameter group requested, sites data requested groups returned.","code":""},{"path":[]},{"path":"/reference/readNWISrating.html","id":null,"dir":"Reference","previous_headings":"","what":"Rating table for an active USGS streamgage retrieval — readNWISrating","title":"Rating table for an active USGS streamgage retrieval — readNWISrating","text":"Reads current rating table active USGS streamgage NWISweb. Data retrieved https://waterdata.usgs.gov/nwis.","code":""},{"path":"/reference/readNWISrating.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rating table for an active USGS streamgage retrieval — readNWISrating","text":"","code":"readNWISrating(siteNumber, type = \"base\", convertType = TRUE)"},{"path":"/reference/readNWISrating.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rating table for an active USGS streamgage retrieval — readNWISrating","text":"siteNumber character USGS site number.  usually 8 digit number type character can \"base\", \"corr\", \"exsa\" convertType logical, defaults TRUE. TRUE, function convert data dates, datetimes, numerics based standard algorithm. false, everything returned character","code":""},{"path":"/reference/readNWISrating.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rating table for an active USGS streamgage retrieval — readNWISrating","text":"data frame. type \"base, \" columns INDEP, typically gage height, feet; DEP, typically streamflow, cubic feet per second; STOR, \"*\" indicates pair fixed point rating curve. type \"exsa, \" additional column, SHIFT, included indicates current shift rating value INDEP. type \"corr, \" columns INDEP, typically gage height, feet; CORR, correction value; CORRINDEP, corrected value CORR. type \"base, \" data frame attribute called \"RATING\" describes rating curve included. also several useful attributes attached data frame:","code":""},{"path":"/reference/readNWISrating.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rating table for an active USGS streamgage retrieval — readNWISrating","text":"active USGS streamgages traditional rating curves relate flow stage.","code":""},{"path":[]},{"path":"/reference/readNWISrating.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rating table for an active USGS streamgage retrieval — readNWISrating","text":"","code":"site_id <- \"01594440\" # \\donttest{ data <- readNWISrating(site_id, \"base\") attr(data, \"RATING\") #> [1] \"ID=20.0\"               \"TYPE=STGQ\"             \"NAME=stage-discharge\"  #> [4] \"AGING=Working\"         \"REMARKS=\"              \"EXPANSION=logarithmic\" #> [7] \"OFFSET1=2.000000E+00\"  # }"},{"path":"/reference/readNWISsite.html","id":null,"dir":"Reference","previous_headings":"","what":"USGS Site File Data Retrieval — readNWISsite","title":"USGS Site File Data Retrieval — readNWISsite","text":"Imports data USGS site file site. function gets data : https://waterservices.usgs.gov/","code":""},{"path":"/reference/readNWISsite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"USGS Site File Data Retrieval — readNWISsite","text":"","code":"readNWISsite(siteNumbers)"},{"path":"/reference/readNWISsite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"USGS Site File Data Retrieval — readNWISsite","text":"siteNumbers character USGS site number (multiple sites).  usually 8 digit number","code":""},{"path":"/reference/readNWISsite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"USGS Site File Data Retrieval — readNWISsite","text":"data frame least following columns: also several useful attributes attached data frame:","code":""},{"path":"/reference/readNWISsite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"USGS Site File Data Retrieval — readNWISsite","text":"","code":"# \\donttest{  siteINFO <- readNWISsite(\"05114000\") siteINFOMulti <- readNWISsite(c(\"05114000\", \"09423350\")) # }"},{"path":"/reference/readNWISstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Site statistics retrieval from USGS (NWIS) — readNWISstat","title":"Site statistics retrieval from USGS (NWIS) — readNWISstat","text":"Retrieves site statistics USGS Statistics Web Service beta. See https://waterservices.usgs.gov/rest/Statistics-Service.html information.","code":""},{"path":"/reference/readNWISstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Site statistics retrieval from USGS (NWIS) — readNWISstat","text":"","code":"readNWISstat(   siteNumbers,   parameterCd,   startDate = \"\",   endDate = \"\",   convertType = TRUE,   statReportType = \"daily\",   statType = \"mean\" )"},{"path":"/reference/readNWISstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Site statistics retrieval from USGS (NWIS) — readNWISstat","text":"siteNumbers character USGS site number (multiple sites).  usually 8 digit number. parameterCd character USGS parameter code.  usually 5 digit number. startDate character starting date data retrieval form YYYY, YYYY-MM, YYYY-MM-DD. Dates specific statReportType, .e. startDate monthly statReportTypes include days, annual statReportTypes include days months.  Months days optional daily statReportType. Default \"\" indicates retrieval earliest possible record.  daily data, indicates start period statistics computed . endDate character ending date data retrieval form YYYY, YYYY-MM, YYYY-MM-DD. Default \"\" indicates retrieval latest possible record.  daily data, indicates end period statistics computed .  restrictions startDate apply. convertType logical, defaults TRUE. TRUE, function convert data numerics based standard algorithm. Years, months, days (appliccable) also returned numerics separate columns.  convertType false, everything returned character. statReportType character time division statistics: daily, monthly, annual.  Default daily. Note daily provides statistics calendar day specified range water years, .e. 366 data points returned site/parameter.  Use readNWISdata readNWISdv daily averages. Also note 'annual' returns statistics calendar year.  Use readNWISdata water years. Monthly yearly provide statistics month year within range indivually. statType character type(s) statistics output daily values. Default mean, option monthly yearly report types. See statistics service documentation https://waterservices.usgs.gov/rest/Statistics-Service.html full list codes.","code":""},{"path":"/reference/readNWISstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Site statistics retrieval from USGS (NWIS) — readNWISstat","text":"data frame following columns:","code":""},{"path":[]},{"path":"/reference/readNWISstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Site statistics retrieval from USGS (NWIS) — readNWISstat","text":"","code":"# \\donttest{ x1 <- readNWISstat(   siteNumbers = c(\"02319394\"),   parameterCd = c(\"00060\"),   statReportType = \"annual\" ) #> Please be aware the NWIS data service feeding this function is in BETA. #>  #>           Data formatting could be changed at any time, and is not guaranteed  # all the annual mean discharge data for two sites x2 <- readNWISstat(   siteNumbers = c(\"02319394\", \"02171500\"),   parameterCd = c(\"00010\", \"00060\"),   statReportType = \"annual\" ) #> Please be aware the NWIS data service feeding this function is in BETA. #>  #>           Data formatting could be changed at any time, and is not guaranteed  # Request p25, p75, and mean values for temperature and discharge for the 2000s # Note that p25 and p75 were not available for temperature, and return NAs x <- readNWISstat(   siteNumbers = c(\"02171500\"),   parameterCd = c(\"00010\", \"00060\"),   statReportType = \"daily\",   statType = c(\"mean\", \"median\"),   startDate = \"2000\", endDate = \"2010\" ) #> Please be aware the NWIS data service feeding this function is in BETA. #>  #>           Data formatting could be changed at any time, and is not guaranteed # }"},{"path":"/reference/readNWISuse.html","id":null,"dir":"Reference","previous_headings":"","what":"Water use data retrieval from USGS (NWIS) — readNWISuse","title":"Water use data retrieval from USGS (NWIS) — readNWISuse","text":"Retrieves water use data USGS Water Use Data Nation.  See https://waterdata.usgs.gov/nwis/wu information.  available use categories supplied arguments retrieved.","code":""},{"path":"/reference/readNWISuse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Water use data retrieval from USGS (NWIS) — readNWISuse","text":"","code":"readNWISuse(   stateCd,   countyCd,   years = \"ALL\",   categories = \"ALL\",   convertType = TRUE,   transform = FALSE )"},{"path":"/reference/readNWISuse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Water use data retrieval from USGS (NWIS) — readNWISuse","text":"stateCd character (full name, abbreviation, id), numeric (id). one accepted per query. countyCd character (name, without \"County\", \"\"), numeric (id), codeNULL, return state national data depending stateCd argument.  \"\" may also supplied, return data every county state. Can vector counties state. years integer Years data retrieval. Must years ending 0 5. Default available years. categories character categories water use.  Defaults \"\". Specific categories must supplied two- letter abbreviations seen URL using NWIS water use web interface.  Note different codes national state level data. convertType logical defaults TRUE. TRUE, function convert data numerics based standard algorithm. Years, months, days (appliccable) also returned numerics separate columns.  convertType false, everything returned character. transform logical intended use national data.  Defaults FALSE, data returned presented web service.  TRUE, data transformed returned column names, reformat national data similar state data.","code":""},{"path":"/reference/readNWISuse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Water use data retrieval from USGS (NWIS) — readNWISuse","text":"data frame least year record, available statistics given geographic parameters. County state fields included appropriate.","code":""},{"path":"/reference/readNWISuse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Water use data retrieval from USGS (NWIS) — readNWISuse","text":"","code":"# \\donttest{ # All data for a county allegheny <- readNWISuse(stateCd = \"Pennsylvania\", countyCd = \"Allegheny\")  # Data for an entire state for certain years ohio <- readNWISuse(years = c(2000, 2005, 2010), stateCd = \"OH\", countyCd = NULL)  # Data for an entire state, county by county pr <- readNWISuse(years = c(2000, 2005, 2010), stateCd = \"PR\", countyCd = \"ALL\")  # All national-scale data, transforming data frame to named columns from named rows national <- readNWISuse(stateCd = NULL, countyCd = NULL, transform = TRUE)  # Washington, DC data dc <- readNWISuse(stateCd = \"DC\", countyCd = NULL)  # data for multiple counties, with different input formatting paData <- readNWISuse(stateCd = \"42\", countyCd = c(\"Allegheny County\", \"BUTLER\", 1, \"031\"))  # retrieving two specific categories for an entire state ks <- readNWISuse(stateCd = \"KS\", countyCd = NULL, categories = c(\"IT\", \"LI\")) # }"},{"path":"/reference/readNWISuv.html","id":null,"dir":"Reference","previous_headings":"","what":"Instantaneous value data retrieval from USGS (NWIS) — readNWISuv","title":"Instantaneous value data retrieval from USGS (NWIS) — readNWISuv","text":"Imports data NWIS web service. function gets data : https://waterservices.usgs.gov/ list parameter codes can found : https://nwis.waterdata.usgs.gov/nwis/pmcodes/ list statistic codes can found : https://nwis.waterdata.usgs.gov/nwis/help/?read_file=stat&format=table. information web service can found : https://waterservices.usgs.gov/rest/IV-Service.html.","code":""},{"path":"/reference/readNWISuv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Instantaneous value data retrieval from USGS (NWIS) — readNWISuv","text":"","code":"readNWISuv(siteNumbers, parameterCd, startDate = \"\", endDate = \"\", tz = \"UTC\")"},{"path":"/reference/readNWISuv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Instantaneous value data retrieval from USGS (NWIS) — readNWISuv","text":"siteNumbers character USGS site number (multiple sites).  usually 8 digit number parameterCd character USGS parameter code.  usually 5 digit number. startDate character starting date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval earliest possible record. Simple date arguments specified local time. See information : https://waterservices.usgs.gov/rest/IV-Service.html. endDate character ending date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval latest possible record. Simple date arguments specified local time. See information : https://waterservices.usgs.gov/rest/IV-Service.html. tz character set timezone attribute dateTime. Default \"UTC\", converts date times UTC, properly accounting daylight savings times based data's provided tz_cd column. Possible values provide \"America/New_York\", \"America/Chicago\", \"America/Denver\", \"America/Los_Angeles\", \"America/Anchorage\", well following use daylight savings time: \"America/Honolulu\", \"America/Jamaica\", \"America/Managua\", \"America/Phoenix\", \"America/Metlakatla\". See also  OlsonNames() information time zones.","code":""},{"path":"/reference/readNWISuv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Instantaneous value data retrieval from USGS (NWIS) — readNWISuv","text":"data frame following columns: Note code value repeated parameters requested. names form: X_D_P_S, X literal, D option description parameter, P parameter code, S statistic code (applicable). also several useful attributes attached data frame:","code":""},{"path":[]},{"path":"/reference/readNWISuv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Instantaneous value data retrieval from USGS (NWIS) — readNWISuv","text":"","code":"site_id <- \"05114000\" parameterCd <- \"00060\" startDate <- \"2014-10-10\" endDate <- \"2014-10-10\" # \\donttest{  rawData <- readNWISuv(site_id, parameterCd, startDate, endDate)  rawData_today <- readNWISuv(site_id, parameterCd, Sys.Date(), Sys.Date())  timeZoneChange <- readNWISuv(   c(\"04024430\", \"04024000\"), parameterCd,   \"2013-11-03\", \"2013-11-03\" )  centralTime <- readNWISuv(site_id, parameterCd,   \"2014-10-10T12:00\", \"2014-10-10T23:59\",   tz = \"America/Chicago\" )  # Adding 'Z' to the time indicates to the web service to call the data with UTC time: GMTdata <- readNWISuv(   site_id, parameterCd,   \"2014-10-10T00:00Z\", \"2014-10-10T23:59Z\" ) # }"},{"path":"/reference/readWQPdata.html","id":null,"dir":"Reference","previous_headings":"","what":"General Data Import from Water Quality Portal — readWQPdata","title":"General Data Import from Water Quality Portal — readWQPdata","text":"Imports data Water Quality Portal web service. function gets data : https://www.waterqualitydata.us. allows agencies rather USGS.","code":""},{"path":"/reference/readWQPdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General Data Import from Water Quality Portal — readWQPdata","text":"","code":"readWQPdata(   ...,   querySummary = FALSE,   tz = \"UTC\",   ignore_attributes = FALSE,   convertType = TRUE )"},{"path":"/reference/readWQPdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General Data Import from Water Quality Portal — readWQPdata","text":"... see https://www.waterqualitydata.us/webservices_documentation complete list options. list arguments can also supplied. information see  description help file. \"service\" argument supplied, default \"Result\". One way figure construct WQP query go \"Advanced\"  form Water Quality Portal: https://www.waterqualitydata.us/#mimeType=csv&providers=NWIS&providers=STEWARDS&providers=STORET Use form discover parameters available. query  set form, scroll \"Query URL\". see parameters \"https://www.waterqualitydata.us/#\". example, chose \"Nutrient\" Characteristic Group dropdown, see characteristicType=Nutrient Query URL. corresponding argument dataRetrieval characteristicType = \"Nutrient\". dataRetrieval users need include mimeType, zip, providers optional (arguments picked automatically). querySummary logical return number records unique sites returned query. tz character set timezone attribute dateTime. Default \"UTC\", converts date times UTC, properly accounting daylight savings times based data's provided tz_cd column. Possible values provide \"America/New_York\",\"America/Chicago\", \"America/Denver\",\"America/Los_Angeles\", \"America/Anchorage\", well following use daylight savings time: \"America/Honolulu\", \"America/Jamaica\",\"America/Managua\",\"America/Phoenix\", \"America/Metlakatla\". See also  OlsonNames() information time zones. ignore_attributes logical choose ignore fetching site parameter attributes. Default FALSE. convertType logical, defaults TRUE. TRUE, function convert data dates, datetimes, numerics based standard algorithm. false, everything returned character.","code":""},{"path":"/reference/readWQPdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General Data Import from Water Quality Portal — readWQPdata","text":"data frame, specific columns depend \"service\" /\"dataProfile\". also several useful attributes attached data frame:","code":""},{"path":"/reference/readWQPdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General Data Import from Water Quality Portal — readWQPdata","text":"function uses ... query input, can flexible, also  steeper learning curve. quick overview, scroll Examples help file see many query options. currently 10 \"services\" provided Water Quality Portal:","code":""},{"path":"/reference/readWQPdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General Data Import from Water Quality Portal — readWQPdata","text":"","code":"# \\donttest{ nameToUse <- \"pH\" pHData <- readWQPdata(siteid = \"USGS-04024315\", characteristicName = nameToUse) pHData_summary <- readWQPdata(   bBox = c(-90.10, 42.67, -88.64, 43.35),   characteristicName = nameToUse, querySummary = TRUE ) startDate <- as.Date(\"2013-01-01\") secchi.names <- c(   \"Depth, Secchi disk depth\",   \"Depth, Secchi disk depth (choice list)\",   \"Secchi Reading Condition (choice list)\",   \"Water transparency, Secchi disc\" ) args <- list(   \"startDateLo\" = startDate,   \"startDateHi\" = \"2013-12-31\",   statecode = \"WI\",   characteristicName = secchi.names )  wqp.data <- readWQPdata(args)  args_2 <- list(   \"startDateLo\" = startDate,   \"startDateHi\" = \"2013-12-31\",   statecode = \"WI\",   characteristicName = secchi.names,   querySummary = TRUE )  wqp.summary <- readWQPdata(args_2)  arg_3 <- list(   \"startDateLo\" = startDate,   \"startDateHi\" = \"2013-12-31\" ) arg_4 <- list(   statecode = \"WI\",   characteristicName = secchi.names ) wqp.summary <- readWQPdata(arg_3, arg_4, querySummary = TRUE) wqp.summary_WI <- readWQPdata(arg_3,   statecode = \"WI\",   characteristicName = secchi.names,   querySummary = TRUE )  # querying by county DeWitt <- readWQPdata(   statecode = \"Illinois\",   countycode = \"DeWitt\",   characteristicName = \"Nitrogen\" )  # Data profiles: \"Organization Data\" org_data <- readWQPdata(   statecode = \"WI\",   countycode = \"Dane\",   service = \"Organization\" )  # Data profiles: \"Site Data Only\" site_data <- readWQPdata(   statecode = \"WI\",   countycode = \"Dane\",   service = \"Station\" )  # Data profiles: \"Project Data\" project_data <- readWQPdata(   statecode = \"WI\",   countycode = \"Dane\",   service = \"Project\" )  # Data profiles: \"Project Monitoring Location Weighting Data\" proj_mlwd <- readWQPdata(   statecode = \"WI\",   countycode = \"Dane\",   service = \"ProjectMonitoringLocationWeighting\" ) #> New names: #> • `ResourceSubjectText` -> `ResourceSubjectText...13` #> • `ResourceSubjectText` -> `ResourceSubjectText...15`  # Data profiles: \"Sample Results (physical/chemical metadata)\": samp_data <- readWQPdata(   siteid = \"USGS-04024315\",   dataProfile = \"resultPhysChem\" )  # Data profiles: \"Sample Results (biological metadata)\" samp_bio <- readWQPdata(   siteid = \"USGS-04024315\",   dataProfile = \"biological\" )  # Data profiles: \"Sample Results (narrow)\" samp_narrow <- readWQPdata(   siteid = \"USGS-04024315\",   dataProfile = \"narrowResult\" )  # Data profiles: \"Sampling Activity\" samp_activity <- readWQPdata(   siteid = \"USGS-04024315\",   dataProfile = \"activityAll\" )  # Data profile: \"Sampling Activity Metrics\" act_metrics <- readWQPdata(   statecode = \"WI\",   countycode = \"Dane\",   service = \"ActivityMetric\" )  # Data profile: \"Result Detection Quantitation Limit Data\" dl_data <- readWQPdata(   siteid = \"USGS-04024315\",   service = \"ResultDetectionQuantitationLimit\" )  Phosphorus <- readWQPdata(   statecode = \"WI\", countycode = \"Dane\",    characteristicName = \"Phosphorus\",   startDateLo = \"2020-01-01\",   convertType = FALSE ) # }"},{"path":"/reference/readWQPdots.html","id":null,"dir":"Reference","previous_headings":"","what":"Format and organize WQP arguments that are passed in as .... — readWQPdots","title":"Format and organize WQP arguments that are passed in as .... — readWQPdots","text":"Format organize WQP arguments passed ....","code":""},{"path":"/reference/readWQPdots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format and organize WQP arguments that are passed in as .... — readWQPdots","text":"","code":"readWQPdots(...)"},{"path":"/reference/readWQPqw.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw Data Import for Water Quality Portal — readWQPqw","title":"Raw Data Import for Water Quality Portal — readWQPqw","text":"Imports data Water Quality Portal. function gets data : https://www.waterqualitydata.us. four required input arguments: siteNumbers, parameterCd, startDate, endDate. parameterCd can either USGS 5-digit code, characteristic name. sites can either USGS, Water Quality Portal offered sites. required use 'full' site name, 'USGS-01234567'.","code":""},{"path":"/reference/readWQPqw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw Data Import for Water Quality Portal — readWQPqw","text":"","code":"readWQPqw(   siteNumbers,   parameterCd,   startDate = \"\",   endDate = \"\",   tz = \"UTC\",   querySummary = FALSE,   convertType = TRUE )"},{"path":"/reference/readWQPqw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raw Data Import for Water Quality Portal — readWQPqw","text":"siteNumbers character site number. needs include full agency code prefix. parameterCd vector USGS 5-digit parameter code characteristicNames. Leaving blank return measured values specified time period. startDate character starting date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval earliest possible record. Date arguments always specified local time. endDate character ending date data retrieval form YYYY-MM-DD. Default \"\" indicates retrieval latest possible record. Date arguments always specified local time. tz character set timezone attribute dateTime. Default \"UTC\", converts date times UTC, properly accounting daylight savings times based data provided tz_cd column. Possible values provide \"America/New_York\",\"America/Chicago\", \"America/Denver\",\"America/Los_Angeles\", \"America/Anchorage\", well following use daylight savings time: \"America/Honolulu\", \"America/Jamaica\",\"America/Managua\",\"America/Phoenix\", \"America/Metlakatla\". See also  OlsonNames() information time zones. querySummary logical look number records unique sites returned query. convertType logical, defaults TRUE. TRUE, function convert data dates, datetimes, numerics based standard algorithm. false, everything returned character.","code":""},{"path":"/reference/readWQPqw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raw Data Import for Water Quality Portal — readWQPqw","text":"data frame least following columns: * = elements NWIS + = elements STORET also several useful attributes attached data frame:","code":""},{"path":[]},{"path":"/reference/readWQPqw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raw Data Import for Water Quality Portal — readWQPqw","text":"","code":"# \\donttest{ rawPcode <- readWQPqw(\"USGS-01594440\", \"01075\", \"\", \"\") rawCharacteristicName <- readWQPqw(\"WIDNR_WQX-10032762\", \"Specific conductance\", \"\", \"\") rawPHsites <- readWQPqw(c(\"USGS-05406450\", \"USGS-05427949\", \"WIDNR_WQX-133040\"), \"pH\", \"\", \"\") nwisEx <- readWQPqw(\"USGS-04024000\", c(\"34247\", \"30234\", \"32104\", \"34220\"), \"\", \"2012-12-20\") nwisEx.summary <- readWQPqw(\"USGS-04024000\", c(\"34247\", \"30234\", \"32104\", \"34220\"),   \"\", \"2012-12-20\",   querySummary = TRUE )  SC <- readWQPqw(siteNumbers = \"USGS-05288705\", parameterCd = \"00300\", convertType = FALSE) # }"},{"path":"/reference/readWQPsummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of Data Available from Water Quality Portal — readWQPsummary","title":"Summary of Data Available from Water Quality Portal — readWQPsummary","text":"Returns list sites year--year information data available. function gets data : https://www.waterqualitydata.us. Arguments function based https://www.waterqualitydata.us/webservices_documentation. information returned function describes available data WQP sites, metadata sites .","code":""},{"path":"/reference/readWQPsummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of Data Available from Water Quality Portal — readWQPsummary","text":"","code":"readWQPsummary(...)"},{"path":"/reference/readWQPsummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of Data Available from Water Quality Portal — readWQPsummary","text":"... see https://www.waterqualitydata.us/webservices_documentation  complete list options. list arguments can also supplied. One way figure construct WQP query go \"Advanced\"  form Water Quality Portal: https://www.waterqualitydata.us/#mimeType=csv&providers=NWIS&providers=STEWARDS&providers=STORET Use form discover parameters available. query  set form, scroll \"Query URL\". see parameters \"https://www.waterqualitydata.us/#\". example, chose \"Nutrient\" Characteristic Group dropdown, see characteristicType=Nutrient Query URL. corresponding argument dataRetrieval characteristicType = \"Nutrient\". dataRetrieval users need include mimeType, zip, providers optional (arguments picked automatically).","code":""},{"path":"/reference/readWQPsummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of Data Available from Water Quality Portal — readWQPsummary","text":"data frame least following columns:","code":""},{"path":[]},{"path":"/reference/readWQPsummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of Data Available from Water Quality Portal — readWQPsummary","text":"","code":"# \\donttest{ # Summary of a single site for the last 5 years: site_5 <- readWQPsummary(   siteid = \"USGS-07144100\",   summaryYears = 5 )  # Summary of a single site for the full period of record: site_all <- readWQPsummary(   siteid = \"USGS-07144100\",   summaryYears = \"all\" )  # Summary of the data available from streams in a single county: dane_county_data <- readWQPsummary(   countycode = \"US:55:025\",   summaryYears = 5,   siteType = \"Stream\" )  # Summary of the data all available from lakes in a single county: lake_sites <- readWQPsummary(   siteType = \"Lake, Reservoir, Impoundment\",   countycode = \"US:55:025\" )  # Summary of the data available for the last 5 years in New Jersey: state1 <- readWQPsummary(   statecode = \"NJ\",   summaryYears = 5,   siteType = \"Stream\" ) # }"},{"path":"/reference/renameNWISColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"renameColumns — renameNWISColumns","title":"renameColumns — renameNWISColumns","text":"Rename columns coming back NWIS data retrievals.  Daily unit value columns names derived data descriptor, parameter, statistic codes. function reads information header arguments call rename columns.","code":""},{"path":"/reference/renameNWISColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"renameColumns — renameNWISColumns","text":"","code":"renameNWISColumns(   rawData,   p00010 = \"Wtemp\",   p00045 = \"Precip\",   p00060 = \"Flow\",   p00065 = \"GH\",   p00095 = \"SpecCond\",   p00300 = \"DO\",   p00400 = \"pH\",   p62611 = \"GWL\",   p63680 = \"Turb\",   p72019 = \"WLBLS\",   ... )"},{"path":"/reference/renameNWISColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"renameColumns — renameNWISColumns","text":"rawData daily- unit-values datset retrieved NWISweb. p00010 base name parameter code 00010. p00045 base name parameter code 00045. p00060 base name parameter code 00060. p00065 base name parameter code 00065. p00095 base name parameter code 00095. p00300 base name parameter code 00300. p00400 base name parameter code 00400. p62611 base name parameter code 62611. p63680 base name parameter code 63680. p72019 base name parameter code 72019. ... named arguments base name parameter code. form name must like pXXXXX, XXXXX parameter code.","code":""},{"path":"/reference/renameNWISColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"renameColumns — renameNWISColumns","text":"dataset like data selected columns renamed.","code":""},{"path":"/reference/renameNWISColumns.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"renameColumns — renameNWISColumns","text":"following statistics codes converted renameNWISColumns. 00000 Instantaneous Value, suffix: Inst 00001 Maximum value, suffix: Max 00002 Minimum value, suffix: Min 00003 Mean value, suffix 00006 Sum values, suffix: Sum 00007 Modal value, suffix: Mode 00008 Median value, suffix: Median 00012 Equivalent mean value, suffix: EqMean 00021 Tidal high-high value, suffix: HiHiTide 00022 Tidal low-high value, suffix: LoHiTide 00023 Tidal high-low value, suffix: HiLoTide 00024 Tidal low-low value, suffix: LoLoTide","code":""},{"path":[]},{"path":"/reference/renameNWISColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"renameColumns — renameNWISColumns","text":"","code":"siteWithTwo <- \"01480015\" startDate <- \"2012-09-01\" endDate <- \"2012-10-01\" # \\donttest{ twoResults <- readNWISdv(siteWithTwo, \"00060\", startDate, endDate) names(twoResults) #> [1] \"agency_cd\"        \"site_no\"          \"Date\"             \"X_00060_00003\"    #> [5] \"X_00060_00003_cd\" renamedCols <- renameNWISColumns(twoResults) names(renamedCols) #> [1] \"agency_cd\" \"site_no\"   \"Date\"      \"Flow\"      \"Flow_cd\"   # Custom names: newNames <- renameNWISColumns(twoResults, p00060 = \"Discharge\") names(newNames) #> [1] \"agency_cd\"    \"site_no\"      \"Date\"         \"Discharge\"    \"Discharge_cd\" # }"},{"path":"/reference/setAccess.html","id":null,"dir":"Reference","previous_headings":"","what":"Set data endpoint — setAccess","title":"Set data endpoint — setAccess","text":"access Indicate dataRetrieval access code want use options: c('public','internal')","code":""},{"path":"/reference/setAccess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set data endpoint — setAccess","text":"","code":"setAccess(access = \"public\")"},{"path":"/reference/setAccess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set data endpoint — setAccess","text":"access code data access. Options : \"public\",\"internal\",\"cooperator\", \"USGS\". \"internal\" represents Access=3 ...single water science center \"USGS\" represents Access=2 ...water science centers \"cooperator\" represents Access=1 \"public\" represents Access=0, public access","code":""},{"path":"/reference/setAccess.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set data endpoint — setAccess","text":"Luke Winslow, Jordan S Read","code":""},{"path":"/reference/setAccess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set data endpoint — setAccess","text":"","code":"# \\donttest{ setAccess(\"internal\") #> setting access to internal  setAccess(\"public\") #> setting access to public # }"},{"path":"/reference/stateCd.html","id":null,"dir":"Reference","previous_headings":"","what":"US State Code Lookup Table — stateCd","title":"US State Code Lookup Table — stateCd","text":"Data originally pulled https://www2.census.gov/geo/docs/reference/state.txt April 1, 2015. Feb. 11, 2022, fields updated file found inst/extdata, used internally NWIS retrievals.","code":""},{"path":"/reference/stateCd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"US State Code Lookup Table — stateCd","text":"stateCd data frame.","code":""},{"path":"/reference/stateCd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"US State Code Lookup Table — stateCd","text":"","code":"head(stateCd) #>   STATE  STATE_NAME STUSAB  STATENS #> 1    00 Unspecified   <NA>     <NA> #> 2    01     Alabama     AL 01779775 #> 3    02      Alaska     AK 01785533 #> 4    04     Arizona     AZ 01779777 #> 5    05    Arkansas     AR 00068085 #> 6    06  California     CA 01779778"},{"path":"/reference/stateCdLookup.html","id":null,"dir":"Reference","previous_headings":"","what":"State code look up — stateCdLookup","title":"State code look up — stateCdLookup","text":"Function simplify finding state state code definitions. Used readNWISdata readWQPdata.","code":""},{"path":"/reference/stateCdLookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"State code look up — stateCdLookup","text":"","code":"stateCdLookup(input, outputType = \"postal\")"},{"path":"/reference/stateCdLookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"State code look up — stateCdLookup","text":"input character (full name, abbreviation, id), numeric (id) outputType character can \"postal\", \"fullName\", \"tableIndex\", \"id\".","code":""},{"path":"/reference/stateCdLookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"State code look up — stateCdLookup","text":"","code":"fullName <- stateCdLookup(\"wi\", \"fullName\") abbriev <- stateCdLookup(\"Wisconsin\", \"postal\") id <- stateCdLookup(\"WI\", \"id\") name <- stateCdLookup(55, \"fullName\") index <- stateCdLookup(\"WI\", \"tableIndex\") stateCd[index, ] #>    STATE STATE_NAME STUSAB  STATENS #> 51    55  Wisconsin     WI 01779806 stateCdLookup(c(\"West Virginia\", \"Wisconsin\", 200, 55, \"MN\")) #> [1] \"WV\" \"WI\" NA   \"WI\" \"MN\""},{"path":"/reference/whatNWISdata.html","id":null,"dir":"Reference","previous_headings":"","what":"USGS data availability — whatNWISdata","title":"USGS data availability — whatNWISdata","text":"Imports table available parameters, period record, count. See https://waterservices.usgs.gov/rest/Site-Service.html information.","code":""},{"path":"/reference/whatNWISdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"USGS data availability — whatNWISdata","text":"","code":"whatNWISdata(..., convertType = TRUE)"},{"path":"/reference/whatNWISdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"USGS data availability — whatNWISdata","text":"... see https://waterservices.usgs.gov/rest/Site-Service.html complete list options.  list arguments can also supplied. convertType logical, defaults TRUE. TRUE, function convert data dates, datetimes, numerics based standard algorithm. false, everything returned character","code":""},{"path":"/reference/whatNWISdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"USGS data availability — whatNWISdata","text":"data frame following columns: also several useful attributes attached data frame:","code":""},{"path":"/reference/whatNWISdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"USGS data availability — whatNWISdata","text":"","code":"# \\donttest{  availableData <- whatNWISdata(siteNumber = \"05114000\") # To find just unit value ('instantaneous') data: uvData <- whatNWISdata(siteNumber = \"05114000\", service = \"uv\") uvDataMulti <- whatNWISdata(siteNumber = c(\"05114000\", \"09423350\"), service = c(\"uv\", \"dv\")) flowAndTemp <- whatNWISdata(   stateCd = \"WI\", service = \"uv\",   parameterCd = c(\"00060\", \"00010\"),   statCd = \"00003\" ) sites <- whatNWISdata(stateCd = \"WI\", parameterCd = \"00060\", siteType = \"ST\", service = \"site\") # }"},{"path":"/reference/whatNWISsites.html","id":null,"dir":"Reference","previous_headings":"","what":"Site Data Import from NWIS — whatNWISsites","title":"Site Data Import from NWIS — whatNWISsites","text":"Returns list sites NWIS web service. function gets data : https://waterservices.usgs.gov/rest/Site-Test-Tool.html. Mapper format used","code":""},{"path":"/reference/whatNWISsites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Site Data Import from NWIS — whatNWISsites","text":"","code":"whatNWISsites(...)"},{"path":"/reference/whatNWISsites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Site Data Import from NWIS — whatNWISsites","text":"... see https://waterservices.usgs.gov/rest/Site-Service.html complete list options. list (lists) can also supplied.","code":""},{"path":"/reference/whatNWISsites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Site Data Import from NWIS — whatNWISsites","text":"data frame least following columns: also several useful attributes attached data frame:","code":""},{"path":"/reference/whatNWISsites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Site Data Import from NWIS — whatNWISsites","text":"","code":"# \\donttest{  siteListPhos <- whatNWISsites(stateCd = \"OH\", parameterCd = \"00665\") oneSite <- whatNWISsites(sites = \"05114000\") # }"},{"path":"/reference/whatWQPdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Available from Water Quality Portal — whatWQPdata","title":"Data Available from Water Quality Portal — whatWQPdata","text":"Returns list sites Water Quality Portal web service. function gets data : https://www.waterqualitydata.us. Arguments function based https://www.waterqualitydata.us/webservices_documentation. information returned whatWQPdata describes available data WQP sites, metadata sites . example, row returned individual site fulfills  query. can learn many sampling activities results  available query. break results finer  grain. example, ask \"Nutrients\" (characteristicGroup), learn specific nutrients available site.  kind data discovery see readWQPsummary.","code":""},{"path":"/reference/whatWQPdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Available from Water Quality Portal — whatWQPdata","text":"","code":"whatWQPdata(..., saveFile = tempfile(), convertType = TRUE)"},{"path":"/reference/whatWQPdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Available from Water Quality Portal — whatWQPdata","text":"... see https://www.waterqualitydata.us/webservices_documentation complete list options. list arguments can also supplied. One way figure construct WQP query go \"Advanced\"  form Water Quality Portal: https://www.waterqualitydata.us/#mimeType=csv&providers=NWIS&providers=STEWARDS&providers=STORET Use form discover parameters available. query  set form, scroll \"Query URL\". see parameters \"https://www.waterqualitydata.us/#\". example, chose \"Nutrient\" Characteristic Group dropdown, see characteristicType=Nutrient Query URL. corresponding argument dataRetrieval characteristicType = \"Nutrient\". dataRetrieval users need include mimeType, zip, providers optional (arguments picked automatically). saveFile path save incoming geojson output. convertType logical, defaults TRUE. TRUE, function convert data dates, datetimes, numerics based standard algorithm. false, everything returned character.","code":""},{"path":"/reference/whatWQPdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Available from Water Quality Portal — whatWQPdata","text":"data frame least following columns:","code":""},{"path":[]},{"path":"/reference/whatWQPdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Available from Water Quality Portal — whatWQPdata","text":"","code":"# \\donttest{ site1 <- whatWQPdata(siteid = \"USGS-01594440\")  type <- \"Stream\" sites <- whatWQPdata(countycode = \"US:55:025\", siteType = type)  lakeSites <- whatWQPdata(siteType = \"Lake, Reservoir, Impoundment\",                          countycode = \"US:55:025\") lakeSites_chars <- whatWQPdata(   siteType = \"Lake, Reservoir, Impoundment\",   countycode = \"US:55:025\", convertType = FALSE) # }"},{"path":"/reference/wqpSpecials.html","id":null,"dir":"Reference","previous_headings":"","what":"Site Data Import from Water Quality Portal — whatWQPsamples","title":"Site Data Import from Water Quality Portal — whatWQPsamples","text":"Returns list sites Water Quality Portal web service. function gets data : https://www.waterqualitydata.us. Arguments function based https://www.waterqualitydata.us/webservices_documentation. return function returns basic metadata WQP sites. generally faster whatWQPdata function, return information data collected site.","code":""},{"path":"/reference/wqpSpecials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Site Data Import from Water Quality Portal — whatWQPsamples","text":"","code":"whatWQPsamples(..., convertType = TRUE)  whatWQPmetrics(..., convertType = TRUE)  whatWQPsites(...)"},{"path":"/reference/wqpSpecials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Site Data Import from Water Quality Portal — whatWQPsamples","text":"... see https://www.waterqualitydata.us/webservices_documentation complete list options. list arguments can also supplied. One way figure construct WQP query go \"Advanced\"  form Water Quality Portal: https://www.waterqualitydata.us/#mimeType=csv&providers=NWIS&providers=STEWARDS&providers=STORET Use form discover parameters available. query  set form, scroll \"Query URL\". see parameters \"https://www.waterqualitydata.us/#\". example, chose \"Nutrient\" Characteristic Group dropdown, see characteristicType=Nutrient Query URL. corresponding argument dataRetrieval characteristicType = \"Nutrient\". dataRetrieval users need include mimeType, zip, providers optional (arguments picked automatically). convertType logical, defaults TRUE. TRUE, function convert data dates, datetimes, numerics based standard algorithm. false, everything returned character.","code":""},{"path":"/reference/wqpSpecials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Site Data Import from Water Quality Portal — whatWQPsamples","text":"data frame least following columns: * element NWIS","code":""},{"path":"/reference/wqpSpecials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Site Data Import from Water Quality Portal — whatWQPsamples","text":"readWQPsummary function ","code":""},{"path":[]},{"path":"/reference/wqpSpecials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Site Data Import from Water Quality Portal — whatWQPsamples","text":"","code":"# \\donttest{  site1 <- whatWQPsamples(siteid = \"USGS-01594440\")  type <- \"Stream\"  sites <- whatWQPsamples(countycode = \"US:55:025\", siteType = type)  lakeSites_samples <- whatWQPsamples(siteType = \"Lake, Reservoir, Impoundment\",                                     countycode = \"US:55:025\") # } # \\donttest{  type <- \"Stream\"  sites <- whatWQPmetrics(countycode = \"US:55:025\", siteType = type) lakeSites_metrics <- whatWQPmetrics(siteType = \"Lake, Reservoir, Impoundment\",                                     countycode = \"US:55:025\") # } # \\donttest{  site1 <- whatWQPsites(siteid = \"USGS-01594440\")  type <- \"Stream\" sites <- whatWQPsites(   countycode = \"US:55:025\",   characteristicName = \"Phosphorus\",   siteType = type ) # }"},{"path":"/reference/zeroPad.html","id":null,"dir":"Reference","previous_headings":"","what":"Pad string with leading zeros — zeroPad","title":"Pad string with leading zeros — zeroPad","text":"Function pad string leading zeros. Useful parameter codes USGS site IDs.","code":""},{"path":"/reference/zeroPad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pad string with leading zeros — zeroPad","text":"","code":"zeroPad(x, padTo)"},{"path":"/reference/zeroPad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pad string with leading zeros — zeroPad","text":"x character padTo number Final desired length character","code":""},{"path":"/reference/zeroPad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pad string with leading zeros — zeroPad","text":"x character returned leading zeros","code":""},{"path":"/reference/zeroPad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pad string with leading zeros — zeroPad","text":"","code":"pCode <- \"10\" correctPCode <- zeroPad(pCode, 5) pCodes <- c(\"100\", \"1000\", \"0\", \"12345\", \"1565465465465465\") correctPCodes <- zeroPad(pCodes, 5) pCodeNA <- c(1, 2, NA) padPCodeNA <- zeroPad(pCodeNA, 4)"}]
